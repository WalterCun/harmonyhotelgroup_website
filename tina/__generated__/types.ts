//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  hotels: Hotels;
  hotelsConnection: HotelsConnection;
  destinations: Destinations;
  destinationsConnection: DestinationsConnection;
  offers: Offers;
  offersConnection: OffersConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHotelsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHotelsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HotelsFilter>;
};


export type QueryDestinationsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDestinationsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DestinationsFilter>;
};


export type QueryOffersArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryOffersConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OffersFilter>;
};

export type DocumentFilter = {
  hotels?: InputMaybe<HotelsFilter>;
  destinations?: InputMaybe<DestinationsFilter>;
  offers?: InputMaybe<OffersFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Hotels | Destinations | Offers | Folder;

export type HotelsContact = {
  __typename?: 'HotelsContact';
  type: Scalars['String']['output'];
  value: Scalars['String']['output'];
  tag?: Maybe<Scalars['String']['output']>;
};

export type HotelsSocialMedia = {
  __typename?: 'HotelsSocialMedia';
  name?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HotelsRoomsDescription_Room = {
  __typename?: 'HotelsRoomsDescription_room';
  lang_room?: Maybe<Scalars['String']['output']>;
  content_destination?: Maybe<Scalars['String']['output']>;
};

export type HotelsRoomsOccupancy = {
  __typename?: 'HotelsRoomsOccupancy';
  min?: Maybe<Scalars['Float']['output']>;
  max?: Maybe<Scalars['Float']['output']>;
};

export type HotelsRooms = {
  __typename?: 'HotelsRooms';
  name?: Maybe<Scalars['String']['output']>;
  description_room?: Maybe<Array<Maybe<HotelsRoomsDescription_Room>>>;
  size?: Maybe<Scalars['Float']['output']>;
  occupancy?: Maybe<HotelsRoomsOccupancy>;
  images?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  room_services?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type HotelsDescription_Hotel = {
  __typename?: 'HotelsDescription_hotel';
  lang_hotel?: Maybe<Scalars['String']['output']>;
  content_hotel?: Maybe<Scalars['String']['output']>;
};

export type HotelsAmenities = {
  __typename?: 'HotelsAmenities';
  basic_services?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  general_services?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  extra_services?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  premium_services?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type Hotels = Node & Document & {
  __typename?: 'Hotels';
  partner?: Maybe<Scalars['Boolean']['output']>;
  name: Scalars['String']['output'];
  stars: Scalars['Float']['output'];
  location: Scalars['String']['output'];
  mainStreet?: Maybe<Scalars['String']['output']>;
  addressNumber?: Maybe<Scalars['String']['output']>;
  secondaryStreet?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<Array<Maybe<HotelsContact>>>;
  socialMedia?: Maybe<Array<Maybe<HotelsSocialMedia>>>;
  rooms?: Maybe<Array<Maybe<HotelsRooms>>>;
  roomPrice: Scalars['Float']['output'];
  coverImage: Scalars['String']['output'];
  gallery?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  description_hotel?: Maybe<Array<Maybe<HotelsDescription_Hotel>>>;
  amenities?: Maybe<Array<Maybe<HotelsAmenities>>>;
  highlight?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type HotelsContactFilter = {
  type?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
  tag?: InputMaybe<StringFilter>;
};

export type HotelsSocialMediaFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type HotelsRoomsDescription_RoomFilter = {
  lang_room?: InputMaybe<StringFilter>;
  content_destination?: InputMaybe<StringFilter>;
};

export type HotelsRoomsOccupancyFilter = {
  min?: InputMaybe<NumberFilter>;
  max?: InputMaybe<NumberFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HotelsRoomsFilter = {
  name?: InputMaybe<StringFilter>;
  description_room?: InputMaybe<HotelsRoomsDescription_RoomFilter>;
  size?: InputMaybe<NumberFilter>;
  occupancy?: InputMaybe<HotelsRoomsOccupancyFilter>;
  images?: InputMaybe<ImageFilter>;
  room_services?: InputMaybe<StringFilter>;
};

export type HotelsDescription_HotelFilter = {
  lang_hotel?: InputMaybe<StringFilter>;
  content_hotel?: InputMaybe<StringFilter>;
};

export type HotelsAmenitiesFilter = {
  basic_services?: InputMaybe<StringFilter>;
  general_services?: InputMaybe<StringFilter>;
  extra_services?: InputMaybe<StringFilter>;
  premium_services?: InputMaybe<StringFilter>;
};

export type HotelsFilter = {
  partner?: InputMaybe<BooleanFilter>;
  name?: InputMaybe<StringFilter>;
  stars?: InputMaybe<NumberFilter>;
  location?: InputMaybe<StringFilter>;
  mainStreet?: InputMaybe<StringFilter>;
  addressNumber?: InputMaybe<StringFilter>;
  secondaryStreet?: InputMaybe<StringFilter>;
  contact?: InputMaybe<HotelsContactFilter>;
  socialMedia?: InputMaybe<HotelsSocialMediaFilter>;
  rooms?: InputMaybe<HotelsRoomsFilter>;
  roomPrice?: InputMaybe<NumberFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  gallery?: InputMaybe<ImageFilter>;
  description_hotel?: InputMaybe<HotelsDescription_HotelFilter>;
  amenities?: InputMaybe<HotelsAmenitiesFilter>;
  highlight?: InputMaybe<BooleanFilter>;
};

export type HotelsConnectionEdges = {
  __typename?: 'HotelsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Hotels>;
};

export type HotelsConnection = Connection & {
  __typename?: 'HotelsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HotelsConnectionEdges>>>;
};

export type DestinationsDescription_Destination = {
  __typename?: 'DestinationsDescription_destination';
  lang_destination?: Maybe<Scalars['String']['output']>;
  content_destination?: Maybe<Scalars['String']['output']>;
};

export type DestinationsTags = {
  __typename?: 'DestinationsTags';
  tag?: Maybe<Scalars['String']['output']>;
};

export type Destinations = Node & Document & {
  __typename?: 'Destinations';
  destination_id: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  country: Scalars['String']['output'];
  city: Scalars['String']['output'];
  description_destination?: Maybe<Array<Maybe<DestinationsDescription_Destination>>>;
  tags?: Maybe<Array<Maybe<DestinationsTags>>>;
  coverImage: Scalars['String']['output'];
  highlight?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DestinationsDescription_DestinationFilter = {
  lang_destination?: InputMaybe<StringFilter>;
  content_destination?: InputMaybe<StringFilter>;
};

export type DestinationsTagsFilter = {
  tag?: InputMaybe<StringFilter>;
};

export type DestinationsFilter = {
  destination_id?: InputMaybe<NumberFilter>;
  name?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  city?: InputMaybe<StringFilter>;
  description_destination?: InputMaybe<DestinationsDescription_DestinationFilter>;
  tags?: InputMaybe<DestinationsTagsFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  highlight?: InputMaybe<BooleanFilter>;
};

export type DestinationsConnectionEdges = {
  __typename?: 'DestinationsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Destinations>;
};

export type DestinationsConnection = Connection & {
  __typename?: 'DestinationsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DestinationsConnectionEdges>>>;
};

export type OffersDescription_Offers = {
  __typename?: 'OffersDescription_offers';
  lang_offer?: Maybe<Scalars['String']['output']>;
  content_offer?: Maybe<Scalars['String']['output']>;
};

export type OffersTags = {
  __typename?: 'OffersTags';
  tag?: Maybe<Scalars['String']['output']>;
};

export type Offers = Node & Document & {
  __typename?: 'Offers';
  offer_id: Scalars['Float']['output'];
  title: Scalars['String']['output'];
  coverImage: Scalars['String']['output'];
  description_offers?: Maybe<Array<Maybe<OffersDescription_Offers>>>;
  expiration_date: Scalars['String']['output'];
  discount: Scalars['String']['output'];
  tags?: Maybe<Array<Maybe<OffersTags>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type OffersDescription_OffersFilter = {
  lang_offer?: InputMaybe<StringFilter>;
  content_offer?: InputMaybe<StringFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type OffersTagsFilter = {
  tag?: InputMaybe<StringFilter>;
};

export type OffersFilter = {
  offer_id?: InputMaybe<NumberFilter>;
  title?: InputMaybe<StringFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  description_offers?: InputMaybe<OffersDescription_OffersFilter>;
  expiration_date?: InputMaybe<DatetimeFilter>;
  discount?: InputMaybe<StringFilter>;
  tags?: InputMaybe<OffersTagsFilter>;
};

export type OffersConnectionEdges = {
  __typename?: 'OffersConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Offers>;
};

export type OffersConnection = Connection & {
  __typename?: 'OffersConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<OffersConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHotels: Hotels;
  createHotels: Hotels;
  updateDestinations: Destinations;
  createDestinations: Destinations;
  updateOffers: Offers;
  createOffers: Offers;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHotelsArgs = {
  relativePath: Scalars['String']['input'];
  params: HotelsMutation;
};


export type MutationCreateHotelsArgs = {
  relativePath: Scalars['String']['input'];
  params: HotelsMutation;
};


export type MutationUpdateDestinationsArgs = {
  relativePath: Scalars['String']['input'];
  params: DestinationsMutation;
};


export type MutationCreateDestinationsArgs = {
  relativePath: Scalars['String']['input'];
  params: DestinationsMutation;
};


export type MutationUpdateOffersArgs = {
  relativePath: Scalars['String']['input'];
  params: OffersMutation;
};


export type MutationCreateOffersArgs = {
  relativePath: Scalars['String']['input'];
  params: OffersMutation;
};

export type DocumentUpdateMutation = {
  hotels?: InputMaybe<HotelsMutation>;
  destinations?: InputMaybe<DestinationsMutation>;
  offers?: InputMaybe<OffersMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  hotels?: InputMaybe<HotelsMutation>;
  destinations?: InputMaybe<DestinationsMutation>;
  offers?: InputMaybe<OffersMutation>;
};

export type HotelsContactMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
  tag?: InputMaybe<Scalars['String']['input']>;
};

export type HotelsSocialMediaMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type HotelsRoomsDescription_RoomMutation = {
  lang_room?: InputMaybe<Scalars['String']['input']>;
  content_destination?: InputMaybe<Scalars['String']['input']>;
};

export type HotelsRoomsOccupancyMutation = {
  min?: InputMaybe<Scalars['Float']['input']>;
  max?: InputMaybe<Scalars['Float']['input']>;
};

export type HotelsRoomsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description_room?: InputMaybe<Array<InputMaybe<HotelsRoomsDescription_RoomMutation>>>;
  size?: InputMaybe<Scalars['Float']['input']>;
  occupancy?: InputMaybe<HotelsRoomsOccupancyMutation>;
  images?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  room_services?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HotelsDescription_HotelMutation = {
  lang_hotel?: InputMaybe<Scalars['String']['input']>;
  content_hotel?: InputMaybe<Scalars['String']['input']>;
};

export type HotelsAmenitiesMutation = {
  basic_services?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  general_services?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  extra_services?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  premium_services?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HotelsMutation = {
  partner?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  stars?: InputMaybe<Scalars['Float']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  mainStreet?: InputMaybe<Scalars['String']['input']>;
  addressNumber?: InputMaybe<Scalars['String']['input']>;
  secondaryStreet?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<Array<InputMaybe<HotelsContactMutation>>>;
  socialMedia?: InputMaybe<Array<InputMaybe<HotelsSocialMediaMutation>>>;
  rooms?: InputMaybe<Array<InputMaybe<HotelsRoomsMutation>>>;
  roomPrice?: InputMaybe<Scalars['Float']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  description_hotel?: InputMaybe<Array<InputMaybe<HotelsDescription_HotelMutation>>>;
  amenities?: InputMaybe<Array<InputMaybe<HotelsAmenitiesMutation>>>;
  highlight?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DestinationsDescription_DestinationMutation = {
  lang_destination?: InputMaybe<Scalars['String']['input']>;
  content_destination?: InputMaybe<Scalars['String']['input']>;
};

export type DestinationsTagsMutation = {
  tag?: InputMaybe<Scalars['String']['input']>;
};

export type DestinationsMutation = {
  destination_id?: InputMaybe<Scalars['Float']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  description_destination?: InputMaybe<Array<InputMaybe<DestinationsDescription_DestinationMutation>>>;
  tags?: InputMaybe<Array<InputMaybe<DestinationsTagsMutation>>>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  highlight?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OffersDescription_OffersMutation = {
  lang_offer?: InputMaybe<Scalars['String']['input']>;
  content_offer?: InputMaybe<Scalars['String']['input']>;
};

export type OffersTagsMutation = {
  tag?: InputMaybe<Scalars['String']['input']>;
};

export type OffersMutation = {
  offer_id?: InputMaybe<Scalars['Float']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  description_offers?: InputMaybe<Array<InputMaybe<OffersDescription_OffersMutation>>>;
  expiration_date?: InputMaybe<Scalars['String']['input']>;
  discount?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<OffersTagsMutation>>>;
};

export type HotelsPartsFragment = { __typename: 'Hotels', partner?: boolean | null, name: string, stars: number, location: string, mainStreet?: string | null, addressNumber?: string | null, secondaryStreet?: string | null, roomPrice: number, coverImage: string, gallery?: Array<string | null> | null, highlight?: boolean | null, contact?: Array<{ __typename: 'HotelsContact', type: string, value: string, tag?: string | null } | null> | null, socialMedia?: Array<{ __typename: 'HotelsSocialMedia', name?: string | null, url?: string | null } | null> | null, rooms?: Array<{ __typename: 'HotelsRooms', name?: string | null, size?: number | null, images?: Array<string | null> | null, room_services?: Array<string | null> | null, description_room?: Array<{ __typename: 'HotelsRoomsDescription_room', lang_room?: string | null, content_destination?: string | null } | null> | null, occupancy?: { __typename: 'HotelsRoomsOccupancy', min?: number | null, max?: number | null } | null } | null> | null, description_hotel?: Array<{ __typename: 'HotelsDescription_hotel', lang_hotel?: string | null, content_hotel?: string | null } | null> | null, amenities?: Array<{ __typename: 'HotelsAmenities', basic_services?: Array<string | null> | null, general_services?: Array<string | null> | null, extra_services?: Array<string | null> | null, premium_services?: Array<string | null> | null } | null> | null };

export type DestinationsPartsFragment = { __typename: 'Destinations', destination_id: number, name: string, country: string, city: string, coverImage: string, highlight?: boolean | null, description_destination?: Array<{ __typename: 'DestinationsDescription_destination', lang_destination?: string | null, content_destination?: string | null } | null> | null, tags?: Array<{ __typename: 'DestinationsTags', tag?: string | null } | null> | null };

export type OffersPartsFragment = { __typename: 'Offers', offer_id: number, title: string, coverImage: string, expiration_date: string, discount: string, description_offers?: Array<{ __typename: 'OffersDescription_offers', lang_offer?: string | null, content_offer?: string | null } | null> | null, tags?: Array<{ __typename: 'OffersTags', tag?: string | null } | null> | null };

export type HotelsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HotelsQuery = { __typename?: 'Query', hotels: { __typename: 'Hotels', id: string, partner?: boolean | null, name: string, stars: number, location: string, mainStreet?: string | null, addressNumber?: string | null, secondaryStreet?: string | null, roomPrice: number, coverImage: string, gallery?: Array<string | null> | null, highlight?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: Array<{ __typename: 'HotelsContact', type: string, value: string, tag?: string | null } | null> | null, socialMedia?: Array<{ __typename: 'HotelsSocialMedia', name?: string | null, url?: string | null } | null> | null, rooms?: Array<{ __typename: 'HotelsRooms', name?: string | null, size?: number | null, images?: Array<string | null> | null, room_services?: Array<string | null> | null, description_room?: Array<{ __typename: 'HotelsRoomsDescription_room', lang_room?: string | null, content_destination?: string | null } | null> | null, occupancy?: { __typename: 'HotelsRoomsOccupancy', min?: number | null, max?: number | null } | null } | null> | null, description_hotel?: Array<{ __typename: 'HotelsDescription_hotel', lang_hotel?: string | null, content_hotel?: string | null } | null> | null, amenities?: Array<{ __typename: 'HotelsAmenities', basic_services?: Array<string | null> | null, general_services?: Array<string | null> | null, extra_services?: Array<string | null> | null, premium_services?: Array<string | null> | null } | null> | null } };

export type HotelsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HotelsFilter>;
}>;


export type HotelsConnectionQuery = { __typename?: 'Query', hotelsConnection: { __typename?: 'HotelsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HotelsConnectionEdges', cursor: string, node?: { __typename: 'Hotels', id: string, partner?: boolean | null, name: string, stars: number, location: string, mainStreet?: string | null, addressNumber?: string | null, secondaryStreet?: string | null, roomPrice: number, coverImage: string, gallery?: Array<string | null> | null, highlight?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: Array<{ __typename: 'HotelsContact', type: string, value: string, tag?: string | null } | null> | null, socialMedia?: Array<{ __typename: 'HotelsSocialMedia', name?: string | null, url?: string | null } | null> | null, rooms?: Array<{ __typename: 'HotelsRooms', name?: string | null, size?: number | null, images?: Array<string | null> | null, room_services?: Array<string | null> | null, description_room?: Array<{ __typename: 'HotelsRoomsDescription_room', lang_room?: string | null, content_destination?: string | null } | null> | null, occupancy?: { __typename: 'HotelsRoomsOccupancy', min?: number | null, max?: number | null } | null } | null> | null, description_hotel?: Array<{ __typename: 'HotelsDescription_hotel', lang_hotel?: string | null, content_hotel?: string | null } | null> | null, amenities?: Array<{ __typename: 'HotelsAmenities', basic_services?: Array<string | null> | null, general_services?: Array<string | null> | null, extra_services?: Array<string | null> | null, premium_services?: Array<string | null> | null } | null> | null } | null } | null> | null } };

export type DestinationsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type DestinationsQuery = { __typename?: 'Query', destinations: { __typename: 'Destinations', id: string, destination_id: number, name: string, country: string, city: string, coverImage: string, highlight?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, description_destination?: Array<{ __typename: 'DestinationsDescription_destination', lang_destination?: string | null, content_destination?: string | null } | null> | null, tags?: Array<{ __typename: 'DestinationsTags', tag?: string | null } | null> | null } };

export type DestinationsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DestinationsFilter>;
}>;


export type DestinationsConnectionQuery = { __typename?: 'Query', destinationsConnection: { __typename?: 'DestinationsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'DestinationsConnectionEdges', cursor: string, node?: { __typename: 'Destinations', id: string, destination_id: number, name: string, country: string, city: string, coverImage: string, highlight?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, description_destination?: Array<{ __typename: 'DestinationsDescription_destination', lang_destination?: string | null, content_destination?: string | null } | null> | null, tags?: Array<{ __typename: 'DestinationsTags', tag?: string | null } | null> | null } | null } | null> | null } };

export type OffersQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type OffersQuery = { __typename?: 'Query', offers: { __typename: 'Offers', id: string, offer_id: number, title: string, coverImage: string, expiration_date: string, discount: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, description_offers?: Array<{ __typename: 'OffersDescription_offers', lang_offer?: string | null, content_offer?: string | null } | null> | null, tags?: Array<{ __typename: 'OffersTags', tag?: string | null } | null> | null } };

export type OffersConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<OffersFilter>;
}>;


export type OffersConnectionQuery = { __typename?: 'Query', offersConnection: { __typename?: 'OffersConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'OffersConnectionEdges', cursor: string, node?: { __typename: 'Offers', id: string, offer_id: number, title: string, coverImage: string, expiration_date: string, discount: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, description_offers?: Array<{ __typename: 'OffersDescription_offers', lang_offer?: string | null, content_offer?: string | null } | null> | null, tags?: Array<{ __typename: 'OffersTags', tag?: string | null } | null> | null } | null } | null> | null } };

export const HotelsPartsFragmentDoc = gql`
    fragment HotelsParts on Hotels {
  __typename
  partner
  name
  stars
  location
  mainStreet
  addressNumber
  secondaryStreet
  contact {
    __typename
    type
    value
    tag
  }
  socialMedia {
    __typename
    name
    url
  }
  rooms {
    __typename
    name
    description_room {
      __typename
      lang_room
      content_destination
    }
    size
    occupancy {
      __typename
      min
      max
    }
    images
    room_services
  }
  roomPrice
  coverImage
  gallery
  description_hotel {
    __typename
    lang_hotel
    content_hotel
  }
  amenities {
    __typename
    basic_services
    general_services
    extra_services
    premium_services
  }
  highlight
}
    `;
export const DestinationsPartsFragmentDoc = gql`
    fragment DestinationsParts on Destinations {
  __typename
  destination_id
  name
  country
  city
  description_destination {
    __typename
    lang_destination
    content_destination
  }
  tags {
    __typename
    tag
  }
  coverImage
  highlight
}
    `;
export const OffersPartsFragmentDoc = gql`
    fragment OffersParts on Offers {
  __typename
  offer_id
  title
  coverImage
  description_offers {
    __typename
    lang_offer
    content_offer
  }
  expiration_date
  discount
  tags {
    __typename
    tag
  }
}
    `;
export const HotelsDocument = gql`
    query hotels($relativePath: String!) {
  hotels(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HotelsParts
  }
}
    ${HotelsPartsFragmentDoc}`;
export const HotelsConnectionDocument = gql`
    query hotelsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HotelsFilter) {
  hotelsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HotelsParts
      }
    }
  }
}
    ${HotelsPartsFragmentDoc}`;
export const DestinationsDocument = gql`
    query destinations($relativePath: String!) {
  destinations(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...DestinationsParts
  }
}
    ${DestinationsPartsFragmentDoc}`;
export const DestinationsConnectionDocument = gql`
    query destinationsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: DestinationsFilter) {
  destinationsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...DestinationsParts
      }
    }
  }
}
    ${DestinationsPartsFragmentDoc}`;
export const OffersDocument = gql`
    query offers($relativePath: String!) {
  offers(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...OffersParts
  }
}
    ${OffersPartsFragmentDoc}`;
export const OffersConnectionDocument = gql`
    query offersConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: OffersFilter) {
  offersConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...OffersParts
      }
    }
  }
}
    ${OffersPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      hotels(variables: HotelsQueryVariables, options?: C): Promise<{data: HotelsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HotelsQueryVariables, query: string}> {
        return requester<{data: HotelsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HotelsQueryVariables, query: string}, HotelsQueryVariables>(HotelsDocument, variables, options);
      },
    hotelsConnection(variables?: HotelsConnectionQueryVariables, options?: C): Promise<{data: HotelsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HotelsConnectionQueryVariables, query: string}> {
        return requester<{data: HotelsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HotelsConnectionQueryVariables, query: string}, HotelsConnectionQueryVariables>(HotelsConnectionDocument, variables, options);
      },
    destinations(variables: DestinationsQueryVariables, options?: C): Promise<{data: DestinationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: DestinationsQueryVariables, query: string}> {
        return requester<{data: DestinationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: DestinationsQueryVariables, query: string}, DestinationsQueryVariables>(DestinationsDocument, variables, options);
      },
    destinationsConnection(variables?: DestinationsConnectionQueryVariables, options?: C): Promise<{data: DestinationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: DestinationsConnectionQueryVariables, query: string}> {
        return requester<{data: DestinationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: DestinationsConnectionQueryVariables, query: string}, DestinationsConnectionQueryVariables>(DestinationsConnectionDocument, variables, options);
      },
    offers(variables: OffersQueryVariables, options?: C): Promise<{data: OffersQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OffersQueryVariables, query: string}> {
        return requester<{data: OffersQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OffersQueryVariables, query: string}, OffersQueryVariables>(OffersDocument, variables, options);
      },
    offersConnection(variables?: OffersConnectionQueryVariables, options?: C): Promise<{data: OffersConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OffersConnectionQueryVariables, query: string}> {
        return requester<{data: OffersConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: OffersConnectionQueryVariables, query: string}, OffersConnectionQueryVariables>(OffersConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  