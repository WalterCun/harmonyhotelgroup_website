# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  hotels(relativePath: String): Hotels!
  hotelsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HotelsFilter): HotelsConnection!
  destinations(relativePath: String): Destinations!
  destinationsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DestinationsFilter): DestinationsConnection!
  offers(relativePath: String): Offers!
  offersConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: OffersFilter): OffersConnection!
}

input DocumentFilter {
  hotels: HotelsFilter
  destinations: DestinationsFilter
  offers: OffersFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Hotels | Destinations | Offers | Folder

type HotelsContact {
  type: String!
  value: String!
  tag: String
}

type HotelsSocialMedia {
  name: String
  url: String
}

type HotelsRoomsDescription_room {
  lang_room: String
  content_destination: String
}

type HotelsRoomsOccupancy {
  min: Float
  max: Float
}

type HotelsRooms {
  name: String
  description_room: [HotelsRoomsDescription_room]
  size: Float
  occupancy: HotelsRoomsOccupancy
  images: [String]
  room_services: [String]
}

type HotelsDescription_hotel {
  lang_hotel: String
  content_hotel: String
}

type HotelsAmenities {
  basic_services: [String]
  general_services: [String]
  extra_services: [String]
  premium_services: [String]
}

type Hotels implements Node & Document {
  partner: Boolean
  name: String!
  stars: Float!
  location: String!
  mainStreet: String
  addressNumber: String
  secondaryStreet: String
  contact: [HotelsContact]
  socialMedia: [HotelsSocialMedia]
  rooms: [HotelsRooms]
  roomPrice: Float!
  coverImage: String!
  gallery: [String]
  description_hotel: [HotelsDescription_hotel]
  amenities: [HotelsAmenities]
  highlight: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input HotelsContactFilter {
  type: StringFilter
  value: StringFilter
  tag: StringFilter
}

input HotelsSocialMediaFilter {
  name: StringFilter
  url: StringFilter
}

input HotelsRoomsDescription_roomFilter {
  lang_room: StringFilter
  content_destination: StringFilter
}

input HotelsRoomsOccupancyFilter {
  min: NumberFilter
  max: NumberFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HotelsRoomsFilter {
  name: StringFilter
  description_room: HotelsRoomsDescription_roomFilter
  size: NumberFilter
  occupancy: HotelsRoomsOccupancyFilter
  images: ImageFilter
  room_services: StringFilter
}

input HotelsDescription_hotelFilter {
  lang_hotel: StringFilter
  content_hotel: StringFilter
}

input HotelsAmenitiesFilter {
  basic_services: StringFilter
  general_services: StringFilter
  extra_services: StringFilter
  premium_services: StringFilter
}

input HotelsFilter {
  partner: BooleanFilter
  name: StringFilter
  stars: NumberFilter
  location: StringFilter
  mainStreet: StringFilter
  addressNumber: StringFilter
  secondaryStreet: StringFilter
  contact: HotelsContactFilter
  socialMedia: HotelsSocialMediaFilter
  rooms: HotelsRoomsFilter
  roomPrice: NumberFilter
  coverImage: ImageFilter
  gallery: ImageFilter
  description_hotel: HotelsDescription_hotelFilter
  amenities: HotelsAmenitiesFilter
  highlight: BooleanFilter
}

type HotelsConnectionEdges {
  cursor: String!
  node: Hotels
}

type HotelsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HotelsConnectionEdges]
}

type DestinationsDescription_destination {
  lang_destination: String
  content_destination: String
}

type DestinationsTags {
  tag: String
}

type Destinations implements Node & Document {
  destination_id: Float!
  name: String!
  country: String!
  city: String!
  description_destination: [DestinationsDescription_destination]
  tags: [DestinationsTags]
  coverImage: String!
  highlight: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DestinationsDescription_destinationFilter {
  lang_destination: StringFilter
  content_destination: StringFilter
}

input DestinationsTagsFilter {
  tag: StringFilter
}

input DestinationsFilter {
  destination_id: NumberFilter
  name: StringFilter
  country: StringFilter
  city: StringFilter
  description_destination: DestinationsDescription_destinationFilter
  tags: DestinationsTagsFilter
  coverImage: ImageFilter
  highlight: BooleanFilter
}

type DestinationsConnectionEdges {
  cursor: String!
  node: Destinations
}

type DestinationsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DestinationsConnectionEdges]
}

type OffersDescription_offers {
  lang_offer: String
  content_offer: String
}

type OffersTags {
  tag: String
}

type Offers implements Node & Document {
  offer_id: Float!
  title: String!
  coverImage: String!
  description_offers: [OffersDescription_offers]
  expiration_date: String!
  discount: String!
  tags: [OffersTags]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input OffersDescription_offersFilter {
  lang_offer: StringFilter
  content_offer: StringFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input OffersTagsFilter {
  tag: StringFilter
}

input OffersFilter {
  offer_id: NumberFilter
  title: StringFilter
  coverImage: ImageFilter
  description_offers: OffersDescription_offersFilter
  expiration_date: DatetimeFilter
  discount: StringFilter
  tags: OffersTagsFilter
}

type OffersConnectionEdges {
  cursor: String!
  node: Offers
}

type OffersConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [OffersConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHotels(relativePath: String!, params: HotelsMutation!): Hotels!
  createHotels(relativePath: String!, params: HotelsMutation!): Hotels!
  updateDestinations(relativePath: String!, params: DestinationsMutation!): Destinations!
  createDestinations(relativePath: String!, params: DestinationsMutation!): Destinations!
  updateOffers(relativePath: String!, params: OffersMutation!): Offers!
  createOffers(relativePath: String!, params: OffersMutation!): Offers!
}

input DocumentUpdateMutation {
  hotels: HotelsMutation
  destinations: DestinationsMutation
  offers: OffersMutation
  relativePath: String
}

input DocumentMutation {
  hotels: HotelsMutation
  destinations: DestinationsMutation
  offers: OffersMutation
}

input HotelsContactMutation {
  type: String
  value: String
  tag: String
}

input HotelsSocialMediaMutation {
  name: String
  url: String
}

input HotelsRoomsDescription_roomMutation {
  lang_room: String
  content_destination: String
}

input HotelsRoomsOccupancyMutation {
  min: Float
  max: Float
}

input HotelsRoomsMutation {
  name: String
  description_room: [HotelsRoomsDescription_roomMutation]
  size: Float
  occupancy: HotelsRoomsOccupancyMutation
  images: [String]
  room_services: [String]
}

input HotelsDescription_hotelMutation {
  lang_hotel: String
  content_hotel: String
}

input HotelsAmenitiesMutation {
  basic_services: [String]
  general_services: [String]
  extra_services: [String]
  premium_services: [String]
}

input HotelsMutation {
  partner: Boolean
  name: String
  stars: Float
  location: String
  mainStreet: String
  addressNumber: String
  secondaryStreet: String
  contact: [HotelsContactMutation]
  socialMedia: [HotelsSocialMediaMutation]
  rooms: [HotelsRoomsMutation]
  roomPrice: Float
  coverImage: String
  gallery: [String]
  description_hotel: [HotelsDescription_hotelMutation]
  amenities: [HotelsAmenitiesMutation]
  highlight: Boolean
}

input DestinationsDescription_destinationMutation {
  lang_destination: String
  content_destination: String
}

input DestinationsTagsMutation {
  tag: String
}

input DestinationsMutation {
  destination_id: Float
  name: String
  country: String
  city: String
  description_destination: [DestinationsDescription_destinationMutation]
  tags: [DestinationsTagsMutation]
  coverImage: String
  highlight: Boolean
}

input OffersDescription_offersMutation {
  lang_offer: String
  content_offer: String
}

input OffersTagsMutation {
  tag: String
}

input OffersMutation {
  offer_id: Float
  title: String
  coverImage: String
  description_offers: [OffersDescription_offersMutation]
  expiration_date: String
  discount: String
  tags: [OffersTagsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
