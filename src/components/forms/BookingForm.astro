---
import {trans} from "../../utils/translations";
import {bookingFormState} from '../../stores/bookingStore';
import {range} from "../../utils/tools";
import {maxAdults, maxChildren} from "../../constants";

const showBookingForm = ['/', '/hotels/[id]'].includes(Astro.url.pathname) ||
    Astro.url.pathname.startsWith('/hotels/');

if (!showBookingForm) return null;

const lang = Astro.currentLocale;
---

<form class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 items-end booking-form">
    <!-- Date Selection -->
    <div class="md:col-span-1">
        <label for="check-in"
               class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">{trans(lang, 'components.forms.reservation.check-in')}</label>
        <input
                type="date"
                id="check-in"
                class="input"
                min={new Date().toISOString().split('T')[0]}
        />
    </div>

    <div class="md:col-span-1">
        <label for="check-out"
               class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">{trans(lang, 'components.forms.reservation.check-out')}</label>
        <input
                type="date"
                id="check-out"
                class="input"
                min={new Date().toISOString().split('T')[0]}
        />
    </div>

    <!-- Guest Selection -->
    <div class="md:col-span-1">
        <label for="adults" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">Adults</label>
        <select id="adults" class="select">
            {
                range(1, maxAdults).map((i, index, array) => {
                    const isLast = index === array.length - 1;
                    return (
                            <option value={i} selected={i === 2}>
                                {i}{isLast ? "+ " : " "}{i >= 2 ? trans(lang, "components.forms.reservation.adult", {"s": "s"}) : trans(lang || "es", "components.forms.adult", {"s": ""})}
                            </option>
                    );
                })
            }
        </select>
    </div>

    <div class="md:col-span-1">
        <label for="children"
               class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">Children</label>
        <select id="children" class="select">
            {
                range(0, maxChildren-1).map((i, index) => {
                    return (
                            <option id=`child-${index}` value={i} selected={i === 0}>
                                {i} {i == 1  ? trans(lang || "es", "components.forms.reservation.child", {"s": ""}) : trans(lang, "components.forms.reservation.child", {"s": "s"}) }
                            </option>
                    );
                })
            }
        </select>
    </div>

    <!-- Child Ages -->
    <div id="child-ages-container"
         class="hidden md:col-span-3 lg:col-span-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mt-2">
        <!-- Child age inputs will be dynamically added here -->
    </div>

    <!-- Amenities -->
    <div class="md:col-span-1 lg:col-span-1 flex items-center space-x-4">
        <div class="flex items-center">
            <input type="checkbox" id="breakfast" class="checkbox"/>
            <label for="breakfast" class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300">Breakfast</label>
        </div>

        <div class="flex items-center">
            <input type="checkbox" id="parking" class="checkbox"/>
            <label for="parking" class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300">Parking</label>
        </div>
    </div>

    <!-- Search Button -->
    <div class="md:col-span-1 lg:col-span-1">
        <button type="submit" class="btn btn-primary w-full">
            Search
        </button>
    </div>
</form>

<script>
    import {bookingFormState} from '../../stores/bookingStore';

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.querySelector('.booking-form');
        if (!form) return;

        const checkInInput = form.querySelector('#check-in') as HTMLInputElement;
        const checkOutInput = form.querySelector('#check-out') as HTMLInputElement;
        const adultsSelect = form.querySelector('#adults') as HTMLSelectElement;
        const childrenSelect = form.querySelector('#children') as HTMLSelectElement;
        const childAgesContainer = form.querySelector('#child-ages-container') as HTMLDivElement;
        const breakfastCheckbox = form.querySelector('#breakfast') as HTMLInputElement;
        const parkingCheckbox = form.querySelector('#parking') as HTMLInputElement;

        // Load initial state
        const state = bookingFormState.get();
        if (state.checkIn) checkInInput.value = state.checkIn;
        if (state.checkOut) checkOutInput.value = state.checkOut;
        adultsSelect.value = state.adults.toString();
        childrenSelect.value = state.children.toString();
        breakfastCheckbox.checked = state.breakfast;
        parkingCheckbox.checked = state.parking;

        // Update state on form changes
        const updateState = () => {
            bookingFormState.set({
                checkIn: checkInInput.value,
                checkOut: checkOutInput.value,
                adults: parseInt(adultsSelect.value),
                children: parseInt(childrenSelect.value),
                childrenAges: Array.from(childAgesContainer.querySelectorAll('select')).map(select => parseInt((select as HTMLSelectElement).value)),
                breakfast: breakfastCheckbox.checked,
                parking: parkingCheckbox.checked
            });
        };

        form.addEventListener('change', updateState);

        // Handle child ages
        childrenSelect?.addEventListener('change', () => {
            if (!childAgesContainer) return;

            const childCount = parseInt(childrenSelect.value);

            childAgesContainer.innerHTML = '';

            if (childCount > 0) {
                childAgesContainer.classList.remove('hidden');

                for (let i = 0; i < childCount; i++) {
                    const ageInput = document.createElement('div');
                    ageInput.innerHTML = `
            <label for="child-age-${i}" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">
              Child ${i + 1} Age
            </label>
            <select id="child-age-${i}" class="select">
              <option value="0">Under 1 year</option>
              <option value="1">1 year</option>
              <option value="2">2 years</option>
              <option value="3">3 years</option>
              <option value="4">4 years</option>
              <option value="5">5 years</option>
              <option value="6">6 years</option>
              <option value="7">7 years</option>
              <option value="8">8 years</option>
              <option value="9">9 years</option>
              <option value="10">10 years</option>
              <option value="11">11 years</option>
              <option value="12">12 years</option>
              <option value="13">13 years</option>
              <option value="14">14 years</option>
              <option value="15">15 years</option>
              <option value="16">16 years</option>
              <option value="17">17 years</option>
            </select>
          `;
                    childAgesContainer.appendChild(ageInput);
                }

                // Set saved ages if available
                const savedAges = bookingFormState.get().childrenAges;
                const ageSelects = childAgesContainer.querySelectorAll('select');
                savedAges.forEach((age, index) => {
                    if (ageSelects[index]) {
                        (ageSelects[index] as HTMLSelectElement).value = age.toString();
                    }
                });
            } else {
                childAgesContainer.classList.add('hidden');
            }

            updateState();
        });

        // Set minimum check-out date
        checkInInput?.addEventListener('change', () => {
            if (checkOutInput && checkInInput.value) {
                const checkInDate = new Date(checkInInput.value);
                const nextDay = new Date(checkInDate);
                nextDay.setDate(nextDay.getDate() + 1);

                const year = nextDay.getFullYear();
                const month = String(nextDay.getMonth() + 1).padStart(2, '0');
                const day = String(nextDay.getDate()).padStart(2, '0');

                checkOutInput.min = `${year}-${month}-${day}`;

                if (checkOutInput.value && new Date(checkOutInput.value) <= new Date(checkInInput.value)) {
                    checkOutInput.value = `${year}-${month}-${day}`;
                    updateState();
                }
            }
        });
    });
</script>