---
import {Calendar, Baby, Users, Search} from 'lucide-astro'
import {range} from "~/utils/tools";
import {maxAdults, maxChildren} from "~/constants";
import {trans} from "~/utils/translations";

interface Props {
    lang: string
}

const {lang} = Astro.props

// if (Astro.request.method === "POST") {
//     try {
//         const data = await Astro.request.formData();
//
//
//     } catch (error) {
//         if (error instanceof Error) {
//             console.error(error.message);
//         }
//     }
// }
// export function updateChildAgesControls(container: HTMLDivElement, childCount: number, ages: number[]) {
//     container.innerHTML = '';
//
//     if (childCount > 0) {
//         container.classList.remove('hidden');
//
//         for (let i = 0; i < childCount; i++) {
//             const label = document.createElement('label');
//             label.className = "block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
//             label.textContent = trans(lang, 'components.forms.reservation.child-age', {"i": i + 1});
//
//
//             const select = document.createElement('select');
//             select.className = 'select';
//             // Agregar opciones de edad (0-17)
//             for (let age = 0; age <= 17; age++) {
//                 const option = document.createElement('option');
//                 option.value = age.toString();
//                 option.textContent = age.toString();
//                 select.appendChild(option);
//             }
//             console.log(select);
//             // Establecer la edad desde el estado si está disponible
//             // if (ages[i] !== undefined) {
//             //     select.value = ages[i].toString();
//             // }
//             container.appendChild(select);
//         }
//     }
// }
---

<!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">-->
<!--<script is:inline src="https://cdn.jsdelivr.net/npm/flatpickr"></script>-->
<!--<script is:inline src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/es.js"></script>-->
<!--<script is:inline src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>-->

<!--<div class="hidden">-->
<!--  <div class="bg-white dark:bg-harmony-black-800 bg-opacity-90 dark:bg-opacity-90 p-6 rounded-lg shadow-lg w-4/5 mx-auto" x-data="reservationForm">-->
<!--    <h2 class="text-2xl font-serif text-harmony-black-700 dark:text-white mb-6 text-center">Reserva tu estancia</h2>-->

<!--    <form class="space-y-4" @submit.prevent="window.open(generateWhatsAppLink(), '_blank')">-->
<!--      &lt;!&ndash; Single row for dates, adults, and children &ndash;&gt;-->
<!--      <div class="grid grid-cols-1 md:grid-cols-12 gap-4 items-end">-->
<!--        &lt;!&ndash; Date pickers (Check-in and Check-out) &ndash;&gt;-->
<!--        <div class="md:col-span-6 grid grid-cols-2 gap-3" x-init="initDatepickers()">-->
<!--          &lt;!&ndash; Check-in date picker &ndash;&gt;-->
<!--          <div>-->
<!--            <label for="check-in-date" class="block text-harmony-black-700 dark:text-white font-medium mb-1">Entrada</label>-->
<!--            <div class="relative">-->
<!--              <input-->
<!--                  type="text"-->
<!--                  id="check-in-date"-->
<!--                  placeholder="Fecha de entrada"-->
<!--                  class="w-full px-3 py-2 border border-harmony-white-500 dark:border-harmony-black-600 bg-white dark:bg-harmony-black-700 text-harmony-black-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-harmony-gold-400"-->
<!--                  required-->
<!--                  readonly-->
<!--              >-->
<!--            </div>-->
<!--          </div>-->

<!--          &lt;!&ndash; Check-out date picker &ndash;&gt;-->
<!--          <div>-->
<!--            <label for="check-out-date" class="block text-harmony-black-700 dark:text-white font-medium mb-1">Salida</label>-->
<!--            <div class="relative">-->
<!--              <input-->
<!--                  type="text"-->
<!--                  id="check-out-date"-->
<!--                  placeholder="Fecha de salida"-->
<!--                  class="w-full px-3 py-2 border border-harmony-white-500 dark:border-harmony-black-600 bg-white dark:bg-harmony-black-700 text-harmony-black-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-harmony-gold-400"-->
<!--                  required-->
<!--                  readonly-->
<!--              >-->
<!--            </div>-->
<!--          </div>-->

<!--          &lt;!&ndash; Custom styling for Flatpickr &ndash;&gt;-->
<!--          <style>-->
<!--            .flatpickr-calendar {-->
<!--              width: auto !important;-->
<!--            }-->
<!--            .flatpickr-calendar.open {-->
<!--              z-index: 9999;-->
<!--            }-->
<!--            .flatpickr-months .flatpickr-month {-->
<!--              background-color: #d4b33f;-->
<!--            }-->
<!--            .flatpickr-current-month .flatpickr-monthDropdown-months,-->
<!--            .flatpickr-current-month .numInputWrapper {-->
<!--              color: white;-->
<!--            }-->
<!--            .flatpickr-weekday {-->
<!--              color: #404040;-->
<!--            }-->
<!--            .flatpickr-day.selected,-->
<!--            .flatpickr-day.startRange,-->
<!--            .flatpickr-day.endRange,-->
<!--            .flatpickr-day.selected.inRange,-->
<!--            .flatpickr-day.startRange.inRange,-->
<!--            .flatpickr-day.endRange.inRange,-->
<!--            .flatpickr-day.selected:focus,-->
<!--            .flatpickr-day.startRange:focus,-->
<!--            .flatpickr-day.endRange:focus,-->
<!--            .flatpickr-day.selected:hover,-->
<!--            .flatpickr-day.startRange:hover,-->
<!--            .flatpickr-day.endRange:hover {-->
<!--              background: #d4b33f;-->
<!--              border-color: #d4b33f;-->
<!--            }-->
<!--            .flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)),-->
<!--            .flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)),-->
<!--            .flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)) {-->
<!--              box-shadow: -10px 0 0 #d4b33f;-->
<!--            }-->
<!--            .flatpickr-day.inRange {-->
<!--              background: #f5d76e;-->
<!--              border-color: #f5d76e;-->
<!--            }-->
<!--          </style>-->
<!--        </div>-->

<!--        &lt;!&ndash; Number of adults &ndash;&gt;-->
<!--        <div class="md:col-span-3">-->
<!--          <label for="adults" class="block text-harmony-black-700 dark:text-white font-medium mb-1">Adultos</label>-->
<!--          <select-->
<!--              id="adults"-->
<!--              x-model="adults"-->
<!--              class="w-full px-3 py-2 border border-harmony-white-500 dark:border-harmony-black-600 bg-white dark:bg-harmony-black-700 text-harmony-black-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-harmony-gold-400"-->
<!--          >-->
<!--            <option value="1">1</option>-->
<!--            <option value="2">2</option>-->
<!--            <option value="3">3</option>-->
<!--            <option value="4">4</option>-->
<!--            <option value="5">5</option>-->
<!--            <option value="6">6</option>-->
<!--          </select>-->
<!--        </div>-->

<!--        &lt;!&ndash; Number of children &ndash;&gt;-->
<!--        <div class="md:col-span-3">-->
<!--          <label for="children" class="block text-harmony-black-700 dark:text-white font-medium mb-1">Niños</label>-->
<!--          <select-->
<!--              id="children"-->
<!--              x-model="children"-->
<!--              @change="updateChildrenAges()"-->
<!--              class="w-full px-3 py-2 border border-harmony-white-500 dark:border-harmony-black-600 bg-white dark:bg-harmony-black-700 text-harmony-black-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-harmony-gold-400"-->
<!--          >-->
<!--            <option value="0">0</option>-->
<!--            <option value="1">1</option>-->
<!--            <option value="2">2</option>-->
<!--            <option value="3">3</option>-->
<!--            <option value="4">4</option>-->
<!--          </select>-->
<!--        </div>-->
<!--      </div>-->

<!--      &lt;!&ndash; Children ages (dynamic) &ndash;&gt;-->
<!--      <div x-show="children > 0" class="space-y-3 animate-fade-in">-->
<!--        <p class="text-harmony-black-700 dark:text-white font-medium">Edad de los niños</p>-->
<!--        <div class="grid grid-cols-2 sm:grid-cols-4 gap-3">-->
<!--          <template x-for="(age, index) in childrenAges" :key="index">-->
<!--            <div>-->
<!--              <label :for="'child-age-' + index" class="block text-harmony-black-600 dark:text-harmony-white-600 text-sm mb-1" x-text="`Niño ${index + 1}`"></label>-->
<!--              <select-->
<!--                  :id="'child-age-' + index"-->
<!--                  x-model="childrenAges[index]"-->
<!--                  class="w-full px-3 py-2 border border-harmony-white-500 dark:border-harmony-black-600 bg-white dark:bg-harmony-black-700 text-harmony-black-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-harmony-gold-400"-->
<!--              >-->
<!--                <option value="">Seleccionar</option>-->
<!--                <option value="0">Menos de 1 año</option>-->
<!--                <option value="1">1 año</option>-->
<!--                <option value="2">2 años</option>-->
<!--                <option value="3">3 años</option>-->
<!--                <option value="4">4 años</option>-->
<!--                <option value="5">5 años</option>-->
<!--                <option value="6">6 años</option>-->
<!--                <option value="7">7 años</option>-->
<!--                <option value="8">8 años</option>-->
<!--                <option value="9">9 años</option>-->
<!--                <option value="10">10 años</option>-->
<!--                <option value="11">11 años</option>-->
<!--                <option value="12">12 años</option>-->
<!--                <option value="13">13 años</option>-->
<!--                <option value="14">14 años</option>-->
<!--                <option value="15">15 años</option>-->
<!--                <option value="16">16 años</option>-->
<!--                <option value="17">17 años</option>-->
<!--              </select>-->
<!--            </div>-->
<!--          </template>-->
<!--        </div>-->
<!--      </div>-->

<!--      &lt;!&ndash; Additional options &ndash;&gt;-->
<!--      <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">-->
<!--        &lt;!&ndash; Breakfast option &ndash;&gt;-->
<!--        <div class="flex items-center">-->
<!--          <input-->
<!--              type="checkbox"-->
<!--              id="breakfast"-->
<!--              x-model="breakfast"-->
<!--              class="h-5 w-5 text-harmony-gold-500 focus:ring-harmony-gold-400 border-harmony-white-500 rounded"-->
<!--          >-->
<!--          <label for="breakfast" class="ml-2 block text-harmony-black-700 dark:text-white">Incluir desayuno</label>-->
<!--        </div>-->

<!--        &lt;!&ndash; Parking option &ndash;&gt;-->
<!--        <div class="flex items-center">-->
<!--          <input-->
<!--              type="checkbox"-->
<!--              id="parking"-->
<!--              x-model="parking"-->
<!--              class="h-5 w-5 text-harmony-gold-500 focus:ring-harmony-gold-400 border-harmony-white-500 rounded"-->
<!--          >-->
<!--          <label for="parking" class="ml-2 block text-harmony-black-700 dark:text-white">Parqueadero</label>-->
<!--        </div>-->
<!--      </div>-->

<!--      <div class="pt-2">-->
<!--        <button-->
<!--            type="submit"-->
<!--            class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-4 rounded-md transition-colors duration-300 flex items-center justify-center"-->
<!--        >-->
<!--          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">-->
<!--            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd" />-->
<!--          </svg>-->
<!--          Reservar por WhatsApp-->
<!--        </button>-->
<!--      </div>-->
<!--    </form>-->
<!--  </div>-->
<!--</div>-->

<form class="absolute bottom-12 left-1/2 -translate-x-1/2 w-full max-w-4xl booking-form">
    <div class="flex flex-col space-y-4 mx-4 bg-white rounded-lg shadow-xl p-6">
        <div class="grid md:grid-cols-4 gap-4">
            <div class="md:col-span-1">
                <label for="check-in" class="text-sm text-gray-600 flex items-center gap-2"
                       data-trans-key="search.checkIn">
                    <Calendar class="w-4 h-4"/>
                    {trans(lang, 'components.forms.reservation.check-in')}
                </label>
                <input
                        type="date"
                        id="check-in"
                        class="input"
                        min={new Date().toISOString().split('T')[0]}
                />
            </div>
            <div class="md:col-span-1">
                <label for="check-out" class="text-sm text-gray-600 flex items-center gap-2">
                    <Calendar class="w-4 h-4"/>
                    {trans(lang, 'components.forms.reservation.check-out')}
                </label>
                <input
                        type="date"
                        id="check-out"
                        class="input"
                        min={new Date().toISOString().split('T')[0]}
                />
            </div>
            <div class="md:col-span-1">
                <label for="adults" class="text-sm text-gray-600 flex items-center gap-2">
                    <Users class="w-4 h-4"/>
                    {trans(lang, 'components.forms.reservation.adult', {"s": "s"})}
                </label>
                <select id="adults"
                        class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-gold-500"
                >
                    {
                        range(1, maxAdults).map((i, index, array) => {
                            const isLast = index === array.length - 1;
                            return (
                                    <option value={i} selected={i === 2}>
                                        {i}{isLast ? "+ " : " "}{i >= 2 ? trans(lang, "components.forms.reservation.adult", {"s": "s"}) : trans(lang, "components.forms.reservation.adult", {"s": ""})}
                                    </option>
                            );
                        })
                    }
                </select>
            </div>
            <div class="md:col-span-1">
                <label for="children" class="text-sm text-gray-600 flex items-center gap-2">
                    <Baby class="w-4 h-4"/>
                    {trans(lang, 'components.forms.reservation.child', {"s": ""})}
                </label>
                <select id="children" class="select">
                    {
                        range(0, maxChildren - 1).map((i, index) => {
                            return (
                                    <option id=`child-${index}` value={i} selected={i === 0}>
                                        {i} {i == 1 ? trans(lang || "es", "components.forms.reservation.child", {"s": ""}) : trans(lang, "components.forms.reservation.child", {"s": "s"})}
                                    </option>
                            );
                        })
                    }
                </select>
            </div>
        </div>
        <!-- Child Ages -->
        <div id="child-ages-container"
             class="hidden md:col-span-3 lg:col-span-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mt-2">
            <!-- Child age inputs will be dynamically added here -->
        </div>

        <!-- Amenities -->
        <div class="md:col-span-1 lg:col-span-1 flex items-center space-x-4">
            <div class="flex items-center space-x-3">
                <label for="breakfast"
                       class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300">{trans(lang, 'components.forms.reservation.breakfast')}</label>
                <input type="checkbox" id="breakfast" class="checkbox"/>
            </div>

            <div class="flex items-center space-x-3">
                <label for="parking"
                       class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300">{trans(lang, 'components.forms.reservation.parking')}</label>
                <input type="checkbox" id="parking" class="checkbox"/>
            </div>
        </div>

        <!-- Search Button -->
        <div class="md:col-span-1 lg:col-span-1">
            <button type="submit" class="btn btn-primary w-full">
                {trans(lang, 'components.forms.reservation.contact')}
            </button>
        </div>
    </div>
</form>


<script define:vars={{ lang }}>
    import { bookingFormState } from "../../stores/bookingStore";
    import { trans } from "../../utils/translations";

    // Crear templates de opciones para edades reutilizables
    const createAgeOptions = (selectedAge = 0) => {
        const options = [];
        for (let age = 0; age <= 17; age++) {
            options.push({
                value: age,
                selected: age === selectedAge,
                label: trans(lang, 'components.forms.reservation.input-child', {
                    'year': age,
                    "s": (age > 1 || age < 1 ? "s" : "")
                })
            });
        }
        return options;
    };

    // Crear un elemento de edad de manera más segura
    const createChildAgeElement = (index, selectedAge = 0) => {
        const div = document.createElement('div');

        const label = document.createElement('label');
        label.className = "text-sm text-gray-600";
        label.textContent = trans(lang, 'components.forms.reservation.label-child', {year: index + 1});

        const select = document.createElement('select');
        select.className = "child-age-select select";
        select.required = true;

        // Agregar opciones de manera más segura
        const ageOptions = createAgeOptions(selectedAge);
        ageOptions.forEach(opt => {
            const option = document.createElement('option');
            option.value = String(opt.value);
            option.textContent = opt.label;
            if (opt.selected) option.selected = true;
            select.appendChild(option);
        });

        div.appendChild(label);
        div.appendChild(select);

        return div;
    };

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.querySelector('.booking-form');
        if (!form) return;

        // Cachear referencias DOM
        const elements = {
            checkIn: form.querySelector('#check-in'),
            checkOut: form.querySelector('#check-out'),
            adults: form.querySelector('#adults'),
            children: form.querySelector('#children'),
            childAgesContainer: form.querySelector('#child-ages-container'),
            breakfast: form.querySelector('#breakfast'),
            parking: form.querySelector('#parking')
        };

        // Validar que todos los elementos existen
        if (!Object.values(elements).every(el => el)) {
            console.error('No se encontraron todos los elementos del formulario');
            return;
        }

        // Cargar estado inicial
        const state = bookingFormState.get();

        // Inicializar valores del formulario desde el estado
        if (state.checkIn) elements.checkIn.value = state.checkIn;
        if (state.checkOut) elements.checkOut.value = state.checkOut;
        elements.adults.value = state.adults.toString();
        elements.children.value = state.children.toString();
        elements.breakfast.checked = state.breakfast;
        elements.parking.checked = state.parking;

        // Actualizar contenedor de edades de niños
        const updateChildAgesUI = () => {
            const container = elements.childAgesContainer;
            const childCount = parseInt(elements.children.value, 10);
            const ages = state.childrenAges || [];

            // Limpiar y luego mostrar/ocultar según sea necesario
            container.innerHTML = '';
            container.style.display = childCount > 0 ? 'grid' : 'none';

            // Crear elementos de edad
            for (let i = 0; i < childCount; i++) {
                const childAge = ages[i] !== undefined ? ages[i] : 0;
                const ageElement = createChildAgeElement(i, childAge);
                container.appendChild(ageElement);
            }
        };

        // Ejecutar inicialmente para configurar la interfaz
        updateChildAgesUI();

        // Actualizar estado en cambios del formulario usando delegación de eventos
        form.addEventListener('change', (e) => {
            const target = e.target;

            // Manejar cambios específicos
            if (target.id === 'children') {
                updateChildAgesUI();
            }

            // Actualizar el estado global
            const childAgeSelects = Array.from(
                elements.childAgesContainer.querySelectorAll('.child-age-select')
            );

            bookingFormState.set({
                checkIn: elements.checkIn.value,
                checkOut: elements.checkOut.value,
                adults: parseInt(elements.adults.value, 10),
                children: parseInt(elements.children.value, 10),
                childrenAges: childAgeSelects.map(select => parseInt(select.value, 10)),
                breakfast: elements.breakfast.checked,
                parking: elements.parking.checked
            });
        });
    });
</script>
