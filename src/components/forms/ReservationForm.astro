---
import {Baby, Calendar, Search, Users, MapPin, BedDouble, Utensils, Car, Smile, Hotel, BusFront} from "lucide-astro";
import {trans} from "~/utils/translations";
import flatpickr from "flatpickr";
import {Spanish} from "flatpickr/dist/l10n/es.js";
import {z} from "zod";

const uniqueCities = ["Quito, Ecuador", "Lima, Perú", "Bogotá, Colombia", "Medellín, Colombia", "Cartagena, Colombia"];
const adultOptions = [...Array(8).keys()]
    .map((i) => String(i + 1))
    .concat("Group");
const childrenOptions = Array.from({length: 8}, (_, i) => String(i));
const roomOptions = Array.from({length: 10}, (_, i) => String(i + 1));
const groupRoomTypeOptions = [
    {value: "shared_room", labelKey: "group_room_type_shared_room"},
    {value: "shared_beds", labelKey: "group_room_type_shared_beds"},
    {value: "independent_rooms", labelKey: "group_room_type_independent_rooms"},
];
const vehicleTypeOptions = [
    {value: "buseta", labelKey: "vehicle_type_buseta"},
    {value: "furgoneta", labelKey: "vehicle_type_furgoneta"},
    {value: "bus", labelKey: "vehicle_type_bus"},
    {value: "flota_vehiculos", labelKey: "vehicle_type_flota"},
    {value: "cooperativa_transporte", labelKey: "vehicle_type_cooperativa"},
    {value: "otro", labelKey: "vehicle_type_other"},
];

// Zod schema for form validation
const bookingFormSchema = z.object({
    city: z.string().min(1, "booking_form_city_required"),
    dateRange: z.object({
        from: z.date().optional(),
        to: z.date().optional(),
    })
        .refine(data => data.from !== undefined, {
            message: "booking_form_check_in_required",
            path: [],
        })
        .refine(data => data.to !== undefined, {
            message: "booking_form_check_out_required",
            path: [],
        })
        .refine(data => {
                if (data.from && data.to) {
                    return data.to > data.from;
                }
                return true;
            },
            {
                message: "booking_form_checkout_after_checkin_error",
                path: [],
            }),
    adults: z.string().min(1, "booking_form_adults_selection_required"),
    rooms: z.string().min(1, "booking_form_rooms_required"),

    children: z.string().optional(),
    childrenAges: z.array(
        z.object({
            age: z.string({required_error: "child_age_required"})
                .pipe(
                    z.coerce.number({invalid_type_error: "child_age_must_be_number"})
                        .min(0, {message: "child_age_min_error"})
                        .max(17, {message: "child_age_max_error"})
                )
        })
    ).optional().default([]),

    groupAdults: z.coerce.number({invalid_type_error: "booking_form_group_adults_numeric"}).optional(),
    groupChildrenUnder5: z.coerce.number({invalid_type_error: "booking_form_group_children_numeric"}).min(0, "booking_form_group_children_non_negative").optional(),
    groupChildrenUnder12: z.coerce.number({invalid_type_error: "booking_form_group_children_numeric"}).min(0, "booking_form_group_children_non_negative").optional(),

    breakfast: z.boolean().default(false),
    parking: z.boolean().default(false),
    largeGroupVehicleType: z.string().optional(),
}).superRefine((data, ctx) => {
    const isGroupSelected = data.adults === "Group";

    if (isGroupSelected) {
        if (data.groupAdults === undefined || data.groupAdults < 1) {
            ctx.addIssue({
                code: z.ZodIssueCode.custom,
                message: "booking_form_group_adults_required",
                path: ["groupAdults"]
            });
        }
    } else {
        const adultsVal = data.adults ? Number.parseInt(data.adults, 10) : 0;
        if (Number.isNaN(adultsVal) || adultsVal < 1 || adultsVal > 8) {
            ctx.addIssue({code: z.ZodIssueCode.custom, message: "booking_form_adults_invalid_count", path: ["adults"]});
        }

        const numChildren = Number.parseInt(data.children || "0", 10);
        if (numChildren > 0) {
            if (!data.childrenAges || data.childrenAges.length !== numChildren) {
                // Individual age field validation is primary.
            }
        }
    }
});

interface Props {
    lang: string;
}

const {lang} = Astro.props;
---

<div class="bg-background/90 backdrop-blur-sm shadow-2xl p-2 sm:p-3 md:p-2 rounded-lg">
    <header class="pb-2 pt-4">
        <h2 class="text-center text-2xl font-bold text-primary">
            {trans(lang, 'components.forms.reservation.title')}
        </h2>
        <p class="text-center text-sm text-muted-foreground">
            {trans(lang, 'components.forms.reservation.subtitle')}
        </p>
    </header>
    <div class="p-1.5 md:p-1">
        <form id="booking-form" class="space-y-3">
            <div class="w-full">
                <label for="city" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                    <MapPin class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                    {trans(lang, 'components.forms.reservation.lbl.country')}
                </label>
                <select id="city" name="city"
                        class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                    <option value="">{trans(lang, 'components.forms.reservation.placeholder.country')}</option>
                    {uniqueCities.map(city => (
                            <option value={city} class="text-sm">{city}</option>
                    ))}
                </select>
                <div id="city-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-x-2.5 gap-y-3">
                <div class="flex flex-col lg:col-span-2">
                    <label for="date-range" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Calendar class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.checkin-checkout')}
                    </label>
                    <button
                            id="date-range"
                            type="button"
                            class="w-full justify-start text-left font-normal h-10 text-sm border rounded-md px-3 focus:ring focus:ring-primary/50"
                    >
                        <span id="date-range-text"
                              class="text-muted-foreground">{trans(lang, 'components.forms.reservation.placeholder.checkin-checkout')}</span>
                    </button>
                    <input type="hidden" id="date-from" name="from"/>
                    <input type="hidden" id="date-to" name="to"/>
                    <div id="date-range-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div class="lg:col-span-1">
                    <label for="adults" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Users class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.adult', {"s": "s"})}
                    </label>
                    <select id="adults" name="adults"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {adultOptions.map(option => (
                                <option value={option} selected={option === "2"} class="text-sm">
                                    {option === "Group"
                                        ? trans(lang, 'components.forms.reservation.group')
                                        : `${option} ${trans(lang, "components.forms.reservation.placeholder.adult", {'s': parseInt(option) > 1 ? 's' : ''})}`}
                                </option>
                        ))}
                    </select>
                    <div id="adults-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div id="children-wrapper" class="lg:col-span-1">
                    <label for="children" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Smile class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.child', {'s': 's'})}
                    </label>
                    <select id="children" name="children"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {childrenOptions.map(option => (
                                <option value={option} selected={option === "0"} class="text-sm">
                                    {
                                        parseInt(option) === 0 ? `${trans(lang, 'components.forms.reservation.nochildren')}` : parseInt(option) > 1 ? `${option} ${trans(lang, 'components.forms.reservation.child', {'s': 's'})}` : `${option} ${trans(lang, 'components.forms.reservation.child', {'s': ''})}`
                                    }
                                </option>
                        ))}
                    </select>
                    <div id="children-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div id="rooms-wrapper" class="lg:col-span-1">
                    <label for="rooms" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <BedDouble class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.rooms')}
                    </label>
                    <select id="rooms" name="rooms"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {roomOptions.map(option => (
                                <option value={option} selected={option === "1"} class="text-sm">
                                    {option} {trans(lang,'components.forms.reservation.placeholder.rooms', parseInt(option) !== 1 ? {"s": "es"} : {"s": ""})}
                                </option>
                        ))}
                    </select>
                    <div id="rooms-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>
            </div>

            <div id="children-ages"
                 class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2 hidden"></div>

            <div id="group-details" class="hidden space-y-2 pt-1.5 border-t border-border mt-2.5">
                <p class="text-sm font-medium text-primary flex items-center">
                    <Users class="mr-1.5 h-4 w-4"/>
                    {trans(lang, 'booking_form_group_details_title')}
                </p>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-x-2.5 gap-y-2.5">
                    <div>
                        <label for="groupAdults" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'booking_form_group_adults_label')}
                        </label>
                        <input
                                type="number"
                                id="groupAdults"
                                name="groupAdults"
                                placeholder="e.g. 10"
                                min="1"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupAdults-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupChildrenUnder5" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'booking_form_group_children_under_5_label')}
                        </label>
                        <input
                                type="number"
                                id="groupChildrenUnder5"
                                name="groupChildrenUnder5"
                                placeholder="e.g. 2"
                                min="0"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupChildrenUnder5-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupChildrenUnder12" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'booking_form_group_children_under_12_label')}
                        </label>
                        <input
                                type="number"
                                id="groupChildrenUnder12"
                                name="groupChildrenUnder12"
                                placeholder="e.g. 3"
                                min="0"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupChildrenUnder12-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupRooms" class="flex items-center text-sm font-medium text-foreground/80">
                            <BedDouble class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                            {trans(lang, 'booking_form_rooms')}
                        </label>
                        <select id="groupRooms" name="rooms"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                            {groupRoomTypeOptions.map(option => (
                                    <option value={option.value} selected={option.value === "independent_rooms"}
                                            class="text-sm">
                                        {trans(lang, option.labelKey)}
                                    </option>
                            ))}
                        </select>
                        <div id="groupRooms-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                </div>
            </div>

            <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 pt-1">
                <label class="flex flex-row items-center space-x-1.5 space-y-0">
                    <input type="checkbox" id="breakfast" name="breakfast" class="h-4 w-4"/>
                    <span class="text-sm font-normal text-foreground/80 flex items-center cursor-pointer">
                        <Utensils class="mr-1 h-5 w-5 text-primary/80"/>
                        {trans(lang, 'components.forms.reservation.breakfast')}
                    </span>
                </label>
                <label id="parking-wrapper" class="flex flex-row items-center space-x-1.5 space-y-0">
                    <input type="checkbox" id="parking" name="parking" checked class="h-4 w-4"/>
                    <span class="text-sm font-normal text-foreground/80 flex items-center cursor-pointer">
                        <Car class="mr-1 h-5 w-5 text-primary/80"/>
                        {trans(lang, 'components.forms.reservation.parking')}
                    </span>
                </label>
                <div id="vehicle-wrapper" class="hidden flex-grow">
                    <div class="flex items-center gap-x-2">
                        <div class="w-auto">
                            <select
                                    id="largeGroupVehicleType"
                                    name="largeGroupVehicleType"
                                    class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                            >
                                {vehicleTypeOptions.map(option => (
                                        <option value={option.value} selected={option.value === "buseta"}
                                                class="text-sm">
                                            {trans(lang, option.labelKey)}
                                        </option>
                                ))}
                            </select>
                        </div>
                        <label for="largeGroupVehicleType"
                               class="flex items-center text-sm font-medium text-foreground/80 whitespace-nowrap shrink-0">
                            <BusFront class="mr-1.5 h-3.5 w-3.5 text-primary shrink-0"/>
                            {trans(lang, 'booking_form_large_group_vehicle_type_label')}
                        </label>
                    </div>
                    <div id="largeGroupVehicleType-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>
            </div>

            <button type="submit"
                    class="w-full bg-primary hover:bg-primary/90 text-primary-foreground text-base mt-2 py-2.5 rounded-md flex items-center justify-center">
                <BedDouble class="mr-1.5 h-4 w-4"/>
                {trans(lang, 'components.forms.reservation.btn.reservations')}
            </button>
        </form>
    </div>
</div>


<script is:inline define:vars={{lang, trans, flatpickr, Spanish, bookingFormSchema}}>
    document.addEventListener('DOMContentLoaded', () => {
        // Cache DOM elements
        const form = document.getElementById('booking-form');
        const citySelect = document.getElementById('city');
        const dateRangeBtn = document.getElementById('date-range');
        const dateRangeText = document.getElementById('date-range-text');
        const dateFromInput = document.getElementById('date-from');
        const dateToInput = document.getElementById('date-to');
        const adultsSelect = document.getElementById('adults');
        const childrenSelect = document.getElementById('children');
        const childrenWrapper = document.getElementById('children-wrapper');
        const childrenAgesContainer = document.getElementById('children-ages');
        const roomsWrapper = document.getElementById('rooms-wrapper');
        const roomsSelect = document.getElementById('rooms');
        const groupDetails = document.getElementById('group-details');
        const groupRoomsSelect = document.getElementById('groupRooms');
        const groupAdultsInput = document.getElementById('groupAdults');
        const groupChildrenUnder5Input = document.getElementById('groupChildrenUnder5');
        const groupChildrenUnder12Input = document.getElementById('groupChildrenUnder12');
        const parkingWrapper = document.getElementById('parking-wrapper');
        const parkingCheckbox = document.getElementById('parking');
        const breakfastCheckbox = document.getElementById('breakfast');
        const vehicleWrapper = document.getElementById('vehicle-wrapper');
        const vehicleTypeSelect = document.getElementById('largeGroupVehicleType');

        // Error message elements
        const errorElements = {
            city: document.getElementById('city-error'),
            dateRange: document.getElementById('date-range-error'),
            adults: document.getElementById('adults-error'),
            children: document.getElementById('children-error'),
            rooms: document.getElementById('rooms-error'),
            groupAdults: document.getElementById('groupAdults-error'),
            groupChildrenUnder5: document.getElementById('groupChildrenUnder5-error'),
            groupChildrenUnder12: document.getElementById('groupChildrenUnder12-error'),
            groupRooms: document.getElementById('groupRooms-error'),
            largeGroupVehicleType: document.getElementById('largeGroupVehicleType-error')
        };

        // Initialize flatpickr for date range
        let dateRangePicker;
        let selectedDates = {from: null, to: null};

        // Function to initialize the date picker
        function initDatePicker() {
            if (dateRangePicker) {
                dateRangePicker.destroy();
            }

            dateRangePicker = flatpickr(dateRangeBtn, {
                mode: "range",
                dateFormat: "Y-m-d",
                minDate: "today",
                locale: Spanish,
                static: true,
                onChange: function (dates, dateStr, instance) {
                    if (dates.length === 0) {
                        selectedDates = {from: null, to: null};
                        dateRangeText.textContent = trans(lang, 'booking_form_date_range_placeholder');
                        dateRangeText.classList.add('text-muted-foreground');
                        dateFromInput.value = '';
                        dateToInput.value = '';
                    } else if (dates.length === 1) {
                        selectedDates = {from: dates[0], to: null};
                        dateRangeText.textContent = formatDate(dates[0]);
                        dateRangeText.classList.remove('text-muted-foreground');
                        dateFromInput.value = formatDateISO(dates[0]);
                        dateToInput.value = '';
                    } else if (dates.length === 2) {
                        // Check if check-in date is after check-out date
                        if (dates[0] > dates[1]) {
                            // Replace check-in with check-out and clear check-out
                            selectedDates = {from: dates[1], to: null};
                            dateRangeText.textContent = formatDate(dates[1]);
                            dateFromInput.value = formatDateISO(dates[1]);
                            dateToInput.value = '';
                            instance.setDate([dates[1]]);
                        } else {
                            selectedDates = {from: dates[0], to: dates[1]};
                            dateRangeText.textContent = `${formatDate(dates[0])} - ${formatDate(dates[1])}`;
                            dateRangeText.classList.remove('text-muted-foreground');
                            dateFromInput.value = formatDateISO(dates[0]);
                            dateToInput.value = formatDateISO(dates[1]);
                            instance.close();
                        }
                    }
                },
                onOpen: function () {
                    if (selectedDates.from) {
                        this.setDate([selectedDates.from, selectedDates.to].filter(Boolean));
                    }
                }
            });
        }

        // Format date for display
        function formatDate(date) {
            return date.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        }

        // Format date for ISO string (YYYY-MM-DD)
        function formatDateISO(date) {
            return date.toISOString().split('T')[0];
        }

        // Initialize date picker
        initDatePicker();

        // Toggle group booking UI
        function toggleGroupBooking() {
            const isGroup = adultsSelect.value === "Group";
            groupDetails.classList.toggle('hidden', !isGroup);
            childrenWrapper.classList.toggle('hidden', isGroup);
            roomsWrapper.classList.toggle('hidden', isGroup);

            // Reset children if switching to group
            if (isGroup && childrenSelect.value !== "0") {
                childrenSelect.value = "0";
                updateChildrenAges();
            }

            // Check if it's a large group and update UI accordingly
            updateLargeGroupUI();
        }

        // Update UI for large groups
        function updateLargeGroupUI() {
            const isGroup = adultsSelect.value === "Group";
            if (!isGroup) {
                vehicleWrapper.classList.add('hidden');
                parkingWrapper.classList.remove('hidden');
                return;
            }

            const groupAdults = parseInt(groupAdultsInput.value || "0", 10);
            const groupChildrenUnder5 = parseInt(groupChildrenUnder5Input.value || "0", 10);
            const groupChildrenUnder12 = parseInt(groupChildrenUnder12Input.value || "0", 10);
            const totalPeople = groupAdults + groupChildrenUnder5 + groupChildrenUnder12;

            const isLargeGroup = isGroup && totalPeople > 8;

            vehicleWrapper.classList.toggle('hidden', !isLargeGroup);
            parkingWrapper.classList.toggle('hidden', isLargeGroup);

            if (isLargeGroup) {
                parkingCheckbox.checked = false;

                // Update vehicle type based on group size
                const totalPeopleForVehicle = groupAdults + groupChildrenUnder12;
                if (totalPeopleForVehicle > 24 && vehicleTypeSelect.value === "furgoneta") {
                    vehicleTypeSelect.value = "bus";
                } else if (totalPeopleForVehicle > 12 && vehicleTypeSelect.value === "buseta") {
                    vehicleTypeSelect.value = "furgoneta";
                }
            } else {
                parkingCheckbox.checked = true;
            }
        }

        // Update children ages UI
        function updateChildrenAges() {
            const childCount = parseInt(childrenSelect.value, 10);
            childrenAgesContainer.innerHTML = '';
            childrenAgesContainer.classList.toggle('hidden', childCount === 0);

            for (let i = 0; i < childCount; i++) {
                const div = document.createElement('div');

                const label = document.createElement('label');
                label.className = 'text-sm text-muted-foreground mb-0.5';
                label.textContent = trans(lang, 'booking_form_child_age_label', {index: i + 1});

                const input = document.createElement('input');
                input.type = 'number';
                input.name = `childrenAges[${i}].age`;
                input.min = '0';
                input.max = '17';
                input.placeholder = trans(lang, 'booking_form_child_age_placeholder');
                input.className = 'h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50';

                const errorDiv = document.createElement('div');
                errorDiv.className = 'text-xs mt-0.5 text-red-500 hidden';
                errorDiv.id = `childAge-${i}-error`;

                div.appendChild(label);
                div.appendChild(input);
                div.appendChild(errorDiv);

                childrenAgesContainer.appendChild(div);
            }
        }

        // Show error message
        function showError(field, message) {
            const errorElement = errorElements[field];
            if (errorElement) {
                errorElement.textContent = trans(lang, message) || message;
                errorElement.classList.remove('hidden');
            }
        }

        // Clear all error messages
        function clearErrors() {
            Object.values(errorElements).forEach(el => {
                if (el) el.classList.add('hidden');
            });

            // Clear child age errors
            const childAgeErrors = document.querySelectorAll('[id^="childAge-"]');
            childAgeErrors.forEach(el => el.classList.add('hidden'));
        }

        // Validate form using Zod schema
        function validateForm() {
            clearErrors();

            try {
                // Prepare form data for validation
                const formData = {
                    city: citySelect.value,
                    dateRange: {
                        from: dateFromInput.value ? new Date(dateFromInput.value) : undefined,
                        to: dateToInput.value ? new Date(dateToInput.value) : undefined
                    },
                    adults: adultsSelect.value,
                    rooms: adultsSelect.value === "Group" ? groupRoomsSelect.value : roomsSelect.value,
                    children: childrenSelect.value,
                    childrenAges: [],
                    breakfast: breakfastCheckbox.checked,
                    parking: parkingCheckbox.checked
                };

                // Add group-specific fields if group is selected
                if (adultsSelect.value === "Group") {
                    formData.groupAdults = groupAdultsInput.value ? parseInt(groupAdultsInput.value, 10) : undefined;
                    formData.groupChildrenUnder5 = groupChildrenUnder5Input.value ? parseInt(groupChildrenUnder5Input.value, 10) : undefined;
                    formData.groupChildrenUnder12 = groupChildrenUnder12Input.value ? parseInt(groupChildrenUnder12Input.value, 10) : undefined;

                    const isLargeGroup = (formData.groupAdults || 0) + (formData.groupChildrenUnder5 || 0) + (formData.groupChildrenUnder12 || 0) > 8;
                    if (isLargeGroup) {
                        formData.largeGroupVehicleType = vehicleTypeSelect.value;
                    }
                } else {
                    // Get children ages
                    const childCount = parseInt(childrenSelect.value, 10);
                    if (childCount > 0) {
                        const ageInputs = childrenAgesContainer.querySelectorAll('input[name^="childrenAges"]');
                        ageInputs.forEach((input, _) => {
                            formData.childrenAges.push({age: input.value});
                        });
                    }
                }

                // Validate with Zod schema
                const result = bookingFormSchema.parse(formData);
                return {isValid: true, data: result};
            } catch (error) {
                // Handle Zod validation errors
                if (error.errors) {
                    error.errors.forEach(err => {
                        const path = err.path.join('.');

                        // Handle nested paths
                        if (path.startsWith('childrenAges')) {
                            const match = path.match(/childrenAges\.(\d+)\.age/);
                            if (match) {
                                const index = match[1];
                                const errorEl = document.getElementById(`childAge-${index}-error`);
                                if (errorEl) {
                                    errorEl.textContent = trans(lang, err.message) || err.message;
                                    errorEl.classList.remove('hidden');
                                }
                            }
                        } else if (path.startsWith('dateRange')) {
                            showError('dateRange', err.message);
                        } else if (path === '') {
                            // General error or dateRange refinement error
                            if (err.message.includes('check')) {
                                showError('dateRange', err.message);
                            }
                        } else {
                            // Standard field error
                            showError(err.path[0], err.message);
                        }
                    });
                }
                return {isValid: false, error};
            }
        }

        // Handle form submission
        function handleSubmit(event) {
            event.preventDefault();

            const validation = validateForm();
            if (!validation.isValid) {
                return;
            }

            const data = validation.data;

            // Prepare WhatsApp message
            let message = `${trans(lang, 'whatsapp_booking_header')}\n\n`;
            message += `${trans(lang, 'booking_form_city_select_label')}: ${data.city}\n`;

            const fromDate = data.dateRange.from ? formatDate(data.dateRange.from) : 'N/A';
            const toDate = data.dateRange.to ? formatDate(data.dateRange.to) : 'N/A';
            message += `${trans(lang, 'booking_form_check_in')}: ${fromDate}\n`;
            message += `${trans(lang, 'booking_form_check_out')}: ${toDate}\n`;

            if (data.adults === "Group") {
                const roomTypeText = trans(lang, groupRoomTypeOptions.find(opt => opt.value === data.rooms)?.labelKey || '');
                message += `${trans(lang, 'booking_form_rooms')}: ${roomTypeText}\n`;
                message += `${trans(lang, 'booking_form_adults_group_label')}: ${data.groupAdults}\n`;

                if (data.groupChildrenUnder5 && data.groupChildrenUnder5 > 0) {
                    message += `${trans(lang, 'booking_form_group_children_under_5_label')}: ${data.groupChildrenUnder5}\n`;
                }

                if (data.groupChildrenUnder12 && data.groupChildrenUnder12 > 0) {
                    message += `${trans(lang, 'booking_form_group_children_under_12_label')}: ${data.groupChildrenUnder12}\n`;
                }

                const isLargeGroup = (data.groupAdults || 0) + (data.groupChildrenUnder5 || 0) + (data.groupChildrenUnder12 || 0) > 8;
                if (isLargeGroup && data.largeGroupVehicleType) {
                    const vehicleTypeText = trans(lang, vehicleTypeOptions.find(opt => opt.value === data.largeGroupVehicleType)?.labelKey || '');
                    message += `${trans(lang, 'booking_form_large_group_vehicle_type_message_label')}: ${vehicleTypeText}\n`;
                }
            } else {
                message += `${trans(lang, 'booking_form_rooms')}: ${data.rooms} ${trans(lang, parseInt(data.rooms) !== 1 ? 'booking_form_rooms_plural_suffix' : 'booking_form_rooms_singular_suffix')}\n`;
                message += `${trans(lang, 'booking_form_adults')}: ${data.adults}\n`;

                if (parseInt(data.children || "0", 10) > 0) {
                    message += `${trans(lang, 'booking_form_children')}: ${data.children}\n`;
                    if (data.childrenAges && data.childrenAges.length > 0) {
                        const ages = data.childrenAges.map(child => child.age).join(', ');
                        message += `${trans(lang, 'Ages of Children')}: ${ages}\n`;
                    }
                }
            }

            message += `${trans(lang, 'booking_form_breakfast')}: ${data.breakfast ? trans(lang, 'Yes') : trans(lang, 'No')}\n`;

            if (!isLargeGroup) {
                message += `${trans(lang, 'booking_form_parking')}: ${data.parking ? trans(lang, 'Yes') : trans(lang, 'No')}\n\n`;
            } else {
                message += '\n';
            }

            message += trans(lang, 'Please confirm availability.');

            // Open WhatsApp with the message
            const encodedMessage = encodeURIComponent(message);
            const whatsappPhoneNumber = "593996146471";
            const whatsappUrl = `https://wa.me/${whatsappPhoneNumber}?text=${encodedMessage}`;

            window.open(whatsappUrl, '_blank');
        }

        // Event listeners
        adultsSelect.addEventListener('change', toggleGroupBooking);
        childrenSelect.addEventListener('change', updateChildrenAges);
        dateRangeBtn.addEventListener('click', () => dateRangePicker.open());
        form.addEventListener('submit', handleSubmit);

        // Group-specific event listeners
        groupAdultsInput.addEventListener('input', updateLargeGroupUI);
        groupChildrenUnder5Input.addEventListener('input', updateLargeGroupUI);
        groupChildrenUnder12Input.addEventListener('input', updateLargeGroupUI);

        // Initialize UI
        toggleGroupBooking();
        updateChildrenAges();

        // Auto-detect city by IP
        fetch('http://ip-api.com/json')
            .then(response => response.json())
            .then(data => {
                if (data.country) {
                    const userCountry = data.country;
                    const cityOption = Array.from(citySelect.options).find(option => {
                        const cityText = option.value.toLowerCase();
                        return cityText.includes(userCountry.toLowerCase());
                    });

                    if (cityOption) {
                        citySelect.value = cityOption.value;
                    }
                }
            })
            .catch(error => console.warn("Could not fetch geolocation:", error));
    });
</script>
