---
import {Baby, Calendar, Search, Users, MapPin, BedDouble, Utensils, Car, Smile, Hotel, BusFront} from "lucide-astro";
import {trans} from "~/utils/translations";
import {
    type CityOption,
    adultOptions,
    childrenOptions,
    roomOptions,
    groupRoomTypeOptions,
    vehicleTypeOptions
} from '../../lib/constants'
import {Api} from "../../utils/tina";

const api = new Api()

let hotels = await api.hotels()
const uniqueCities: CityOption[] = [...new Set(hotels.map(hotel => hotel.location).filter(Boolean))];

// Zod schema for form validation
// const bookingFormSchema = z.object({
//     city: z.string().min(1, "booking_form_city_required"),
//     dateRange: z.object({
//         from: z.date().optional(),
//         to: z.date().optional(),
//     })
//         .refine(data => data.from !== undefined, {
//             message: "booking_form_check_in_required",
//             path: [],
//         })
//         .refine(data => data.to !== undefined, {
//             message: "booking_form_check_out_required",
//             path: [],
//         })
//         .refine(data => {
//                 if (data.from && data.to) {
//                     return data.to > data.from;
//                 }
//                 return true;
//             },
//             {
//                 message: "booking_form_checkout_after_checkin_error",
//                 path: [],
//             }),
//     adults: z.string().min(1, "booking_form_adults_selection_required"),
//     rooms: z.string().min(1, "booking_form_rooms_required"),
//
//     children: z.string().optional(),
//     childrenAges: z.array(
//         z.object({
//             age: z.string({required_error: "child_age_required"})
//                 .pipe(
//                     z.coerce.number({invalid_type_error: "child_age_must_be_number"})
//                         .min(0, {message: "child_age_min_error"})
//                         .max(17, {message: "child_age_max_error"})
//                 )
//         })
//     ).optional().default([]),
//
//     groupAdults: z.coerce.number({invalid_type_error: "booking_form_group_adults_numeric"}).optional(),
//     groupChildrenUnder5: z.coerce.number({invalid_type_error: "booking_form_group_children_numeric"}).min(0, "booking_form_group_children_non_negative").optional(),
//     groupChildrenUnder12: z.coerce.number({invalid_type_error: "booking_form_group_children_numeric"}).min(0, "booking_form_group_children_non_negative").optional(),
//
//     breakfast: z.boolean().default(false),
//     parking: z.boolean().default(false),
//     largeGroupVehicleType: z.string().optional(),
// }).superRefine((data, ctx) => {
//     const isGroupSelected = data.adults === "Group";
//
//     if (isGroupSelected) {
//         if (data.groupAdults === undefined || data.groupAdults < 1) {
//             ctx.addIssue({
//                 code: z.ZodIssueCode.custom,
//                 message: "booking_form_group_adults_required",
//                 path: ["groupAdults"]
//             });
//         }
//     } else {
//         const adultsVal = data.adults ? Number.parseInt(data.adults, 10) : 0;
//         if (Number.isNaN(adultsVal) || adultsVal < 1 || adultsVal > 8) {
//             ctx.addIssue({code: z.ZodIssueCode.custom, message: "booking_form_adults_invalid_count", path: ["adults"]});
//         }
//
//         const numChildren = Number.parseInt(data.children || "0", 10);
//         if (numChildren > 0) {
//             if (!data.childrenAges || data.childrenAges.length !== numChildren) {
//                 // Individual age field validation is primary.
//             }
//         }
//     }
// });

// ---------------------------------------------------------------------------------------------------------

interface Props {
    lang: string;
}

const {lang} = Astro.props;
---

<div class="bg-background/90 backdrop-blur-sm shadow-2xl p-2 sm:p-3 md:p-2 rounded-lg">
    <header class="pb-2 pt-4">
        <h2 class="text-center text-2xl font-bold text-primary">
            {trans(lang, 'components.forms.reservation.title')}
        </h2>
        <p class="text-center text-sm text-muted-foreground">
            {trans(lang, 'components.forms.reservation.subtitle')}
        </p>
    </header>
    <div class="p-1.5 md:p-1">
        <form id="booking-form" class="space-y-3" method="POST">
            <div class="w-full">
                <label for="city" class="flex flex-col items-start  text-sm font-medium text-foreground/80 mb-0.5">
                    <div class="flex gap-1">
                        <MapPin class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.country')}</div>
                    <select id="city" name="city"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        <option value="" selected disabled>
                            {trans(lang, 'components.forms.reservation.placeholder.country')}
                        </option>
                        {uniqueCities.map(city => (
                                <option value={city} class="text-sm">{city}</option>
                        ))}
                    </select>
                </label>
                <div id="city-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-x-2.5 gap-y-3">
                <div class="flex flex-col lg:col-span-2">
                    <label for="date-range" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Calendar class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.checkin-checkout')}
                    </label>
                    <input
                            id="date-range"
                            type="text"
                            class="w-full justify-start text-left font-normal h-10 text-sm border rounded-md px-3 focus:ring focus:ring-primary/50"
                            placeholder={trans(lang, 'components.forms.reservation.placeholder.checkin-checkout')}
                            readonly
                    />
                    <input type="hidden" id="date-from" name="from"/>
                    <input type="hidden" id="date-to" name="to"/>
                    <div id="date-range-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div class="lg:col-span-1">
                    <label for="adults" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Users class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.adult', {"s": "s"})}
                    </label>
                    <select id="adults" name="adults"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {adultOptions.map(option => (
                                <option value={option} selected={option === "2"} class="text-sm">
                                    {option === "Group"
                                        ? trans(lang, 'components.forms.reservation.group')
                                        : `${option} ${trans(lang, "components.forms.reservation.placeholder.adult", {'s': parseInt(option) > 1 ? 's' : ''})}`}
                                </option>
                        ))}
                    </select>
                    <div id="adults-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div id="children-wrapper" class="lg:col-span-1">
                    <label for="children" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <Smile class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.child', {'s': 's'})}
                    </label>
                    <select id="children" name="children"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {childrenOptions.map(option => (
                                <option value={option} selected={option === "0"} class="text-sm">
                                    {
                                        parseInt(option) === 0 ? `${trans(lang, 'components.forms.reservation.nochildren')}` : parseInt(option) > 1 ? `${option} ${trans(lang, 'components.forms.reservation.child', {'s': 's'})}` : `${option} ${trans(lang, 'components.forms.reservation.child', {'s': ''})}`
                                    }
                                </option>
                        ))}
                    </select>
                    <div id="children-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>

                <div id="rooms-wrapper" class="lg:col-span-1">
                    <label for="rooms" class="flex items-center text-sm font-medium text-foreground/80 mb-0.5">
                        <BedDouble class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.rooms')}
                    </label>
                    <select id="rooms" name="rooms"
                            class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                        {roomOptions.map(option => (
                                <option value={option} selected={option === "1"} class="text-sm">
                                    {option} {trans(lang, 'components.forms.reservation.placeholder.rooms', parseInt(option) !== 1 ? {"s": "es"} : {"s": ""})}
                                </option>
                        ))}
                    </select>
                    <div id="rooms-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>
            </div>

            <template id="child-age-template">
                <div>
                    <label for="children-details" class="text-sm text-muted-foreground mb-0.5" data-label-text>
                        <Smile class="mr-1.5 h-3.5 w-3.5 text-primary"/>
                        {trans(lang, 'components.forms.reservation.lbl.children-item', {index: 1})}
                    </label>
                    <input
                            id="children-details"
                            type="number"
                            name="childrenAges[0].age"
                            min="0"
                            max="17"
                            placeholder={trans(lang, 'components.forms.reservation.placeholder.child-age')}
                            class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                    />
                    <div class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>
            </template>

            <div id="children-ages"
                 class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2 hidden"></div>


            <div id="group-details" class="hidden space-y-2 pt-1.5 border-t border-border mt-2.5">
                <p class="text-sm font-medium text-primary flex items-center">
                    <Users class="mr-1.5 h-4 w-4"/>
                    {trans(lang, 'components.forms.reservation.lbl.group')}
                </p>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-x-2.5 gap-y-2.5">
                    <div>
                        <label for="groupAdults" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'components.forms.reservation.lbl.group-adult')}
                        </label>
                        <input
                                type="number"
                                id="groupAdults"
                                name="groupAdults"
                                placeholder="e.g. 10"
                                min="1"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupAdults-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupChildrenUnder5" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'components.forms.reservation.lbl.group-children-5')}
                        </label>
                        <input
                                type="number"
                                id="groupChildrenUnder5"
                                name="groupChildrenUnder5"
                                placeholder="e.g. 2"
                                min="0"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupChildrenUnder5-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupChildrenUnder12" class="text-sm font-medium text-foreground/80">
                            {trans(lang, 'components.forms.reservation.lbl.group-children-12')}
                        </label>
                        <input
                                type="number"
                                id="groupChildrenUnder12"
                                name="groupChildrenUnder12"
                                placeholder="e.g. 3"
                                min="0"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                        />
                        <div id="groupChildrenUnder12-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                    <div>
                        <label for="groupRooms" class="flex items-center text-sm font-medium text-foreground/80">
                            <BedDouble class="mr-1.5 h-4 w-4 text-primary"/>
                            {trans(lang, 'components.forms.reservation.lbl.rooms')}
                        </label>
                        <select id="groupRooms" name="rooms"
                                class="h-9 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50">
                            {groupRoomTypeOptions.map(option => (
                                    <option value={option.value} selected={option.value === "shared_beds"}
                                            class="text-sm">
                                        {trans(lang, option.labelKey)}
                                    </option>
                            ))}
                        </select>
                        <div id="groupRooms-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                    </div>
                </div>
            </div>

            <div class="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 pt-1">
                <label class="flex flex-row items-center space-x-1.5 space-y-0">
                    <input type="checkbox" id="breakfast" name="breakfast" class="h-4 w-4"/>
                    <span class="text-sm font-normal text-foreground/80 flex items-center cursor-pointer">
                        <Utensils class="mr-1 h-5 w-5 text-primary/80"/>
                        {trans(lang, 'components.forms.reservation.breakfast')}
                    </span>
                </label>
                <label id="parking-wrapper" class="flex flex-row items-center space-x-1.5 space-y-0">
                    <input type="checkbox" id="parking" name="parking" class="h-4 w-4"/>
                    <span class="text-sm font-normal text-foreground/80 flex items-center cursor-pointer">
                        <Car class="mr-1 h-5 w-5 text-primary/80"/>
                        {trans(lang, 'components.forms.reservation.parking')}
                    </span>
                </label>
                <div id="vehicle-wrapper" class="hidden flex-grow">
                    <div class="flex items-center gap-x-2">
                        <div class="w-auto">
                            <select
                                    id="largeGroupVehicleType"
                                    name="largeGroupVehicleType"
                                    class="h-10 text-sm w-full border rounded-md px-3 focus:ring focus:ring-primary/50"
                            >
                                {vehicleTypeOptions.map(option => (
                                        <option value={option.value} selected={option.value === "buseta"}
                                                class="text-sm">
                                            {trans(lang, option.labelKey)}
                                        </option>
                                ))}
                            </select>
                        </div>
                        <label for="largeGroupVehicleType"
                               class="flex items-center text-sm font-medium text-foreground/80 whitespace-nowrap shrink-0">
                            <BusFront class="mr-1.5 h-3.5 w-3.5 text-primary shrink-0"/>
                            {trans(lang, 'components.forms.reservation.placeholder.group-type-vehicle')}
                        </label>
                    </div>
                    <div id="largeGroupVehicleType-error" class="text-xs mt-0.5 text-red-500 hidden"></div>
                </div>
            </div>

            <button id="booking-form-submit" type="submit"
                    class="w-full bg-primary hover:bg-primary/90 text-primary-foreground text-base mt-2 py-2.5 rounded-md flex items-center justify-center">
                <BedDouble class="mr-1.5 h-4 w-4"/>
                {trans(lang, 'components.forms.reservation.btn.reservations')}
            </button>
        </form>
    </div>
</div>


<script>
    import {actions} from 'astro:actions';
    import flatpickr from "flatpickr";

    document.addEventListener('DOMContentLoaded', async (): Promise<void> => {
        const lang: string = 'es';

        const form: HTMLFormElement = document.getElementById('booking-form') as HTMLFormElement;

        const citySelect: HTMLSelectElement = document.getElementById('city') as HTMLSelectElement;

        // const geolocation = await getGeolocation()

        const dateInput: HTMLInputElement = document.querySelector('#date-range') as HTMLInputElement;
        const dateFrom: HTMLInputElement = document.querySelector('#date-from') as HTMLInputElement;
        const dateTo: HTMLInputElement = document.querySelector('#date-to') as HTMLInputElement;

        const adultsSelect: HTMLSelectElement = document.getElementById('adults') as HTMLSelectElement;
        const childrenSelect: HTMLSelectElement = document.getElementById('children') as HTMLSelectElement;
        const childrenWrapper: HTMLElement = document.getElementById('children-wrapper') as HTMLElement;
        const childrenAgesContainer: HTMLElement = document.getElementById('children-ages') as HTMLElement;

        const roomsWrapper: HTMLElement = document.getElementById('rooms-wrapper') as HTMLElement;
        const roomsSelect: HTMLSelectElement = document.getElementById('rooms') as HTMLSelectElement;
        const groupDetails: HTMLElement = document.getElementById('group-details') as HTMLElement;
        const groupRoomsSelect: HTMLSelectElement = document.getElementById('groupRooms') as HTMLSelectElement;
        const groupAdultsInput: HTMLInputElement = document.getElementById('groupAdults') as HTMLInputElement;
        const groupChildrenUnder5Input: HTMLInputElement = document.getElementById('groupChildrenUnder5') as HTMLInputElement;
        const groupChildrenUnder12Input: HTMLInputElement = document.getElementById('groupChildrenUnder12') as HTMLInputElement;

        const parkingWrapper: HTMLElement = document.getElementById('parking-wrapper') as HTMLElement;
        const parkingCheckbox: HTMLInputElement = document.getElementById('parking') as HTMLInputElement;
        const breakfastCheckbox: HTMLInputElement = document.getElementById('breakfast') as HTMLInputElement;
        const vehicleWrapper: HTMLElement = document.getElementById('vehicle-wrapper') as HTMLElement;
        const vehicleTypeSelect: HTMLSelectElement = document.getElementById('largeGroupVehicleType') as HTMLSelectElement;

        // Error message elements
        interface ErrorElements {
            [key: string]: HTMLElement | null;
        }

        const errorElements: ErrorElements = {
            city: document.getElementById('city-error'),
            dateRange: document.getElementById('date-range-error'),
            adults: document.getElementById('adults-error'),
            children: document.getElementById('children-error'),
            rooms: document.getElementById('rooms-error'),
            groupAdults: document.getElementById('groupAdults-error'),
            groupChildrenUnder5: document.getElementById('groupChildrenUnder5-error'),
            groupChildrenUnder12: document.getElementById('groupChildrenUnder12-error'),
            groupRooms: document.getElementById('groupRooms-error'),
            largeGroupVehicleType: document.getElementById('largeGroupVehicleType-error')
        };

        // Initialize flatpickr for date range
        interface FlatpickrInstance {
            destroy: () => void;
        }

        let dateRangePicker: FlatpickrInstance | null = null;

        interface DateRange {
            from: Date | null;
            to: Date | null;
        }

        let selectedDates: DateRange = {from: null, to: null};

        // Function to initialize the date picker
        function initDatePicker(): void {
            if (dateRangePicker) {
                dateRangePicker.destroy();
            }

            if (dateInput) {
                dateRangePicker = flatpickr(dateInput, {
                    mode: 'range',
                    dateFormat: 'Y-m-d',
                    minDate: 'today',
                    locale: flatpickr.l10ns.es, // usar la versión desde CDN
                    altInput: true,
                    altFormat: 'j M Y',
                    onChange: (dates: Date[], dateStr: string, instance: any): void => {
                        if (dates.length === 0) {
                            selectedDates = {from: null, to: null};
                            dateFrom.value = '';
                            dateTo.value = '';
                        } else if (dates.length === 1) {
                            selectedDates = {from: dates[0], to: null};
                            dateFrom.value = dates[0].toISOString().split('T')[0];
                            dateTo.value = '';
                        } else if (dates.length === 2) {
                            const [start, end]: [Date, Date] = dates[0] <= dates[1] ? [dates[0], dates[1]] : [dates[1], dates[0]];
                            selectedDates = {from: start, to: end};
                            dateFrom.value = start.toISOString().split('T')[0];
                            dateTo.value = end.toISOString().split('T')[0];
                        }
                    },
                });
            }
        }

        // Format date for display
        function formatDate(date: Date): string {
            return date.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        }

        // Format date for ISO string (YYYY-MM-DD)
        function formatDateISO(date: Date): string {
            return date.toISOString().split('T')[0];
        }

        // Initialize date picker
        initDatePicker();

        // Toggle group booking UI
        function toggleGroupBooking(): void {
            const isGroup: boolean = adultsSelect.value === "Group";
            groupDetails?.classList.toggle('hidden', !isGroup);
            childrenWrapper?.classList.toggle('hidden', isGroup);
            roomsWrapper?.classList.toggle('hidden', isGroup);

            // Reset children if switching to group
            if (isGroup && childrenSelect.value !== "0") {
                childrenSelect.value = "0";
                updateChildrenAges();
            }

            // Check if it's a large group and update UI accordingly
            updateLargeGroupUI();
        }

        // Update UI for large groups
        function updateLargeGroupUI(): void {
            const isGroup: boolean = adultsSelect.value === "Group";
            if (!isGroup) {
                vehicleWrapper.classList.add('hidden');
                parkingWrapper.classList.remove('hidden');
                return;
            }

            const groupAdults: number = parseInt(groupAdultsInput.value || "0", 10);
            const groupChildrenUnder5: number = parseInt(groupChildrenUnder5Input.value || "0", 10);
            const groupChildrenUnder12: number = parseInt(groupChildrenUnder12Input.value || "0", 10);
            const totalPeopleAdult: number = groupAdults + groupChildrenUnder12;
            const totalPeople: number = groupAdults + groupChildrenUnder5 + groupChildrenUnder12;

            const isLargeGroup: boolean = isGroup && totalPeopleAdult > 8;

            vehicleWrapper.classList.toggle('hidden', !isLargeGroup);
            parkingWrapper.classList.toggle('hidden', isLargeGroup);

            if (isLargeGroup) {
                // Update a vehicle type based on group size
                // const totalPeopleForVehicle = groupAdults + groupChildrenUnder12;
                if (totalPeople > 24 && vehicleTypeSelect.value === "furgoneta") {
                    vehicleTypeSelect.value = "bus";
                } else if (totalPeople > 12 && vehicleTypeSelect.value === "buseta") {
                    vehicleTypeSelect.value = "furgoneta";
                }
            }
        }

        // Update children ages UI
        function updateChildrenAges(): void {
            const childCount: number = parseInt(childrenSelect.value, 10);
            childrenAgesContainer.innerHTML = '';
            childrenAgesContainer.classList.toggle('hidden', childCount === 0);

            // Obtener la plantilla
            const template: HTMLTemplateElement | null = document.getElementById('child-age-template') as HTMLTemplateElement;

            if (template) {
                for (let i: number = 0; i < childCount; i++) {
                    // Clonar la plantilla
                    const clone: DocumentFragment = template.content.cloneNode(true) as DocumentFragment;

                    // Actualizar los atributos y contenidos específicos
                    const label: HTMLLabelElement | null = clone.querySelector('label');
                    if (label && label.hasAttribute('data-label-text')) {
                        // Reemplazar el texto {index} en la etiqueta
                        label.textContent = label.textContent!.replace('1', String(i + 1));
                    }

                    const input: HTMLInputElement | null = clone.querySelector('input');
                    if (input) {
                        input.name = `childrenAges[${i}].age`;
                    }

                    const errorDiv: HTMLDivElement | null = clone.querySelector('div');
                    if (errorDiv) {
                        errorDiv.id = `childAge-${i}-error`;
                    }

                    // Añadir al contenedor
                    childrenAgesContainer.appendChild(clone);
                }
            }
        }

        // Show error message
        // function showError(field: string, message: string): void {
        //     const errorElement: HTMLElement | null = errorElements[field];
        //     if (errorElement) {
        //         errorElement.textContent = trans(lang, message) || message;
        //         errorElement.classList.remove('hidden');
        //     }
        // }

        // Clear all error messages
        // function clearErrors(): void {
        //     Object.values(errorElements).forEach(el => {
        //         if (el) el.classList.add('hidden');
        //     });
        //
        //     // Clear child age errors
        //     const childAgeErrors: NodeListOf<Element> = document.querySelectorAll('[id^="childAge-"]');
        //     childAgeErrors.forEach(el => el.classList.add('hidden'));
        // }

        // Validate form using Zod schema
        // interface ValidationResult {
        //     isValid: boolean;
        //     data?: any;
        //     error?: any;
        // }

        // function validateForm(): ValidationResult {
        //     clearErrors();
        //
        //     try {
        //         // Prepare form data for validation
        //         const formData: any = {
        //             city: citySelect.value,
        //             dateRange: {
        //                 from: dateFrom.value ? new Date(dateFrom.value) : undefined,
        //                 to: dateTo.value ? new Date(dateTo.value) : undefined
        //             },
        //             adults: adultsSelect.value,
        //             rooms: adultsSelect.value === "Group" ? groupRoomsSelect.value : roomsSelect.value,
        //             children: childrenSelect.value,
        //             childrenAges: [],
        //             breakfast: breakfastCheckbox.checked,
        //             parking: parkingCheckbox.checked
        //         };
        //         // Add group-specific fields if group is selected
        //         if (adultsSelect.value === "Group") {
        //             formData.groupAdults = groupAdultsInput.value ? parseInt(groupAdultsInput.value, 10) : undefined;
        //             formData.groupChildrenUnder5 = groupChildrenUnder5Input.value ? parseInt(groupChildrenUnder5Input.value, 10) : undefined;
        //             formData.groupChildrenUnder12 = groupChildrenUnder12Input.value ? parseInt(groupChildrenUnder12Input.value, 10) : undefined;
        //
        //             const isLargeGroup: boolean = (formData.groupAdults || 0) + (formData.groupChildrenUnder5 || 0) + (formData.groupChildrenUnder12 || 0) > 8;
        //             if (isLargeGroup) {
        //                 formData.largeGroupVehicleType = vehicleTypeSelect.value;
        //             }
        //         } else {
        //             // Get children ages
        //             const childCount: number = parseInt(childrenSelect.value, 10);
        //             if (childCount > 0) {
        //                 const ageInputs: NodeListOf<Element> = childrenAgesContainer.querySelectorAll('input[name^="childrenAges"]');
        //                 ageInputs.forEach((input: Element, _: number) => {
        //                     formData.childrenAges.push({age: (input as HTMLInputElement).value});
        //                 });
        //             }
        //         }
        //
        //         // Validate with Zod schema
        //         console.log(bookingFormSchema);
        //         const result = bookingFormSchema.parse(formData);
        //         return {isValid: true, data: result};
        //     } catch (error: any) {
        //         // Handle Zod validation errors
        //         if (error.errors) {
        //             error.errors.forEach((err: any) => {
        //                 const path: string = err.path.join('.');
        //
        //                 // Handle nested paths
        //                 if (path.startsWith('childrenAges')) {
        //                     const match: RegExpMatchArray | null = path.match(/childrenAges\.(\d+)\.age/);
        //                     if (match) {
        //                         const index: string = match[1];
        //                         const errorEl: HTMLElement | null = document.getElementById(`childAge-${index}-error`);
        //                         if (errorEl) {
        //                             errorEl.textContent = trans(lang, err.message) || err.message;
        //                             errorEl.classList.remove('hidden');
        //                         }
        //                     }
        //                 } else if (path.startsWith('dateRange')) {
        //                     showError('dateRange', err.message);
        //                 } else if (path === '') {
        //                     // General error or dateRange refinement error
        //                     if (err.message.includes('check')) {
        //                         showError('dateRange', err.message);
        //                     }
        //                 } else {
        //                     // Standard field error
        //                     showError(err.path[0], err.message);
        //                 }
        //             });
        //         }
        //         return {isValid: false, error};
        //     }
        // }

        // Handle form submission
        async function handleSubmit(event: Event): Promise<void> {
            console.log('Form submit event triggered');
            event.preventDefault();

            const formData: FormData = new FormData(form);

            const {error} = await actions.reservation(formData);
            if (!error) console.info("Reservation", error);

            // const validation: ValidationResult = validateForm();
            // if (!validation.isValid) {
            //     return;
            // }
            //
            // console.log("Validation True");
            //
            // const data: any = validation.data;
            //
            // // Prepare WhatsApp message
            // let message: string = `${trans(lang, 'whatsapp_booking_header')}\n\n`;
            // message += `${trans(lang, 'booking_form_city_select_label')}: ${data.city}\n`;
            //
            // const fromDate: string = data.dateRange.from ? formatDate(data.dateRange.from) : 'N/A';
            // const toDate: string = data.dateRange.to ? formatDate(data.dateRange.to) : 'N/A';
            // message += `${trans(lang, 'booking_form_check_in')}: ${fromDate}\n`;
            // message += `${trans(lang, 'booking_form_check_out')}: ${toDate}\n`;
            //
            // if (data.adults === "Group") {
            //     const roomTypeText: string = trans(lang, groupRoomTypeOptions.find(opt => opt.value === data.rooms)?.labelKey || '');
            //     message += `${trans(lang, 'booking_form_rooms')}: ${roomTypeText}\n`;
            //     message += `${trans(lang, 'booking_form_adults_group_label')}: ${data.groupAdults}\n`;
            //
            //     if (data.groupChildrenUnder5 && data.groupChildrenUnder5 > 0) {
            //         message += `${trans(lang, 'booking_form_group_children_under_5_label')}: ${data.groupChildrenUnder5}\n`;
            //     }
            //
            //     if (data.groupChildrenUnder12 && data.groupChildrenUnder12 > 0) {
            //         message += `${trans(lang, 'booking_form_group_children_under_12_label')}: ${data.groupChildrenUnder12}\n`;
            //     }
            //
            //     const isLargeGroup: boolean = (data.groupAdults || 0) + (data.groupChildrenUnder5 || 0) + (data.groupChildrenUnder12 || 0) > 8;
            //     if (isLargeGroup && data.largeGroupVehicleType) {
            //         const vehicleTypeText: string = trans(lang, vehicleTypeOptions.find(opt => opt.value === data.largeGroupVehicleType)?.labelKey || '');
            //         message += `${trans(lang, 'booking_form_large_group_vehicle_type_message_label')}: ${vehicleTypeText}\n`;
            //     }
            // } else {
            //     message += `${trans(lang, 'booking_form_rooms')}: ${data.rooms} ${trans(lang, parseInt(data.rooms) !== 1 ? 'booking_form_rooms_plural_suffix' : 'booking_form_rooms_singular_suffix')}\n`;
            //     message += `${trans(lang, 'booking_form_adults')}: ${data.adults}\n`;
            //
            //     if (parseInt(data.children || "0", 10) > 0) {
            //         message += `${trans(lang, 'booking_form_children')}: ${data.children}\n`;
            //         if (data.childrenAges && data.childrenAges.length > 0) {
            //             const ages: string = data.childrenAges.map((child: any) => child.age).join(', ');
            //             message += `${trans(lang, 'Ages of Children')}: ${ages}\n`;
            //         }
            //     }
            // }
            //
            // message += `${trans(lang, 'booking_form_breakfast')}: ${data.breakfast ? trans(lang, 'Yes') : trans(lang, 'No')}\n`;
            //
            // if (!isLargeGroup) {
            //     message += `${trans(lang, 'booking_form_parking')}: ${data.parking ? trans(lang, 'Yes') : trans(lang, 'No')}\n\n`;
            // } else {
            //     message += '\n';
            // }
            //
            // message += trans(lang, 'Please confirm availability.');
            //
            // // Open WhatsApp with the message
            // const encodedMessage: string = encodeURIComponent(message);
            // const whatsappPhoneNumber: string = "+593996146471";
            // const whatsappUrl: string = `https://wa.me/${whatsappPhoneNumber}?text=${encodedMessage}`;
            //
            // window.open(whatsappUrl, '_blank');
        }

        // Event listeners
        adultsSelect.addEventListener('change', toggleGroupBooking);
        childrenSelect.addEventListener('change', updateChildrenAges);
        form.addEventListener('submit', handleSubmit);

        // Group-specific event listeners
        groupAdultsInput.addEventListener('input', updateLargeGroupUI);
        groupChildrenUnder5Input.addEventListener('input', updateLargeGroupUI);
        groupChildrenUnder12Input.addEventListener('input', updateLargeGroupUI);

        // Initialize UI
        toggleGroupBooking();
        adultsSelect.dispatchEvent(new Event('change'));
        updateChildrenAges();

        // Auto-detect city by IP
        // fetch('http://ip-api.coms/json')
        //     .then((response: Response) => response.json())
        //     .then((data: any) => {
        //         if (data.country) {
        //             const userCountry: string = data.country;
        //             const cityOption: HTMLOptionElement | undefined = Array.from(citySelect.options).find((option: HTMLOptionElement) => {
        //                 const cityText: string = option.value.toLowerCase();
        //                 return cityText.includes(userCountry.toLowerCase());
        //             });
        //
        //             if (cityOption) {
        //                 citySelect.value = cityOption.value;
        //             }
        //         }
        //     })
        //     .catch((error: Error) => console.warn("Could not fetch geolocation:", error));
    });
</script>
