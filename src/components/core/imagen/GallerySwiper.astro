---
import { Image } from "astro:assets";
import "@glidejs/glide/dist/css/glide.core.min.css";
import "@glidejs/glide/dist/css/glide.theme.min.css";
import { resolveImage } from "../../../utils";

interface Props {
  images: string[];
  id?: string;
  className?: string;
  aspectRatio?: string;
  navigation?: boolean;
  pagination?: boolean;
  effect?: "slide" | "fade";
  loop?: boolean;
  autoplay?: boolean;
  autoplayDelay?: number;
  thumbnails?: boolean;
  lazy?: boolean;
  quality?: number;
  fullscreen?: boolean;
}

const {
  images,
  id = `image-gallery-${Math.floor(Math.random() * 10000)}`,
  className = "",
  aspectRatio = "16/9",
  navigation = true,
  pagination = true,
  effect = "slide",
  loop = true,
  autoplay = false,
  autoplayDelay = 3000,
  thumbnails = false,
  lazy = true,
  quality = 80,
  fullscreen = true,
} = Astro.props;

// Verificar que hay imágenes para mostrar
const hasImages = images && images.length > 0;

// Preparar las opciones para el script
const glideOptions = JSON.stringify({
  id,
  navigation,
  pagination,
  effect,
  loop,
  autoplay,
  autoplayDelay,
  thumbnails,
  fullscreen,
});
---

{hasImages ? (
<div class={`image-gallery-container ${className}`}>
    <div class="glide" id={id} style={`aspect-ratio: ${aspectRatio}`}>
        <div class="glide__track" data-glide-el="track">
            <ul class="glide__slides">
                {images.map((image, index) => (
                        <li class="glide__slide">
                            <div class="image-wrapper">
                                <Image
                                        src={resolveImage(image)}
                                        alt={`Gallery image ${index + 1}`}
                                        width={2000}
                                        height={1000}
                                        loading={lazy ? "lazy" : "eager"}
                                        format="webp"
                                        quality={quality}
                                />
                            </div>
                        </li>
                ))}
            </ul>
        </div>
        {navigation && (
                <div class="glide__arrows" data-glide-el="controls">
                    <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
                        <span class="sr-only">Anterior</span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M15 18l-6-6 6-6" />
                        </svg>
                    </button>
                    <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
                        <span class="sr-only">Siguiente</span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M9 18l6-6-6-6" />
                        </svg>
                    </button>
                </div>
        )}
        {pagination && (
                <div class="glide__bullets" data-glide-el="controls[nav]">
                    {images.map((_, index) => (
                            <button class="glide__bullet" data-glide-dir={`=${index}`} aria-label={`Ir a diapositiva ${index + 1}`}></button>
                    ))}
                </div>
        )}
    </div>

    {thumbnails && (
            <div class="thumbnails-container" id={`${id}-thumbs`}>
                <div class="thumbnails-track">
                    {images.map((image, index) => (
                            <div class="thumbnail-item" data-index={index}>
                                <div class="thumb-wrapper">
                                    <Image
                                            src={resolveImage(image)}
                                            alt={`Miniatura ${index + 1}`}
                                            width={100}
                                            height={75}
                                            loading="lazy"
                                            format="webp"
                                            quality={90}
                                    />
                                </div>
                            </div>
                    ))}
                </div>
            </div>
    )}

    {fullscreen && (
            <button class="fullscreen-button" id={`${id}-fullscreen`} aria-label="Ver en pantalla completa">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path>
                </svg>
            </button>
    )}

    <div class="fullscreen-overlay hidden" id={`${id}-overlay`}>
        <button class="fullscreen-close" id={`${id}-close`} aria-label="Cerrar pantalla completa">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <div class="fullscreen-glide" id={`${id}-fullscreen-glide`}>
            <div class="glide__track" data-glide-el="track">
                <ul class="glide__slides">
                    {images.map((image, index) => (
                            <li class="glide__slide">
                                <div class="image-wrapper">
                                    <Image
                                            src={resolveImage(image)}
                                            alt={`Imagen ${index + 1}`}
                                            width={1200}
                                            height={900}
                                            loading="lazy"
                                            format="webp"
                                            quality={90}
                                    />
                                </div>
                            </li>
                    ))}
                </ul>
            </div>
            <div class="glide__arrows" data-glide-el="controls">
                <button class="glide__arrow glide__arrow--left" data-glide-dir="<">
                    <span class="sr-only">Anterior</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M15 18l-6-6 6-6" />
                    </svg>
                </button>
                <button class="glide__arrow glide__arrow--right" data-glide-dir=">">
                    <span class="sr-only">Siguiente</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 18l6-6-6-6" />
                    </svg>
                </button>
            </div>
            <div class="glide__bullets" data-glide-el="controls[nav]">
                {images.map((_, index) => (
                        <button class="glide__bullet" data-glide-dir={`=${index}`} aria-label={`Ir a diapositiva ${index + 1}`}></button>
                ))}
            </div>
        </div>
    </div>
</div>
    ) : (
<div class={`image-gallery-placeholder ${className}`} style={`aspect-ratio: ${aspectRatio}`}>
    <div class="placeholder-content">
        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21 15 16 10 5 21"></polyline>
        </svg>
        <p>No hay imágenes disponibles</p>
    </div>
</div>
    )}

<style>
    .image-gallery-container {
        position: relative;
        width: 100%;
        margin: 0 auto;
        overflow: hidden;
        border-radius: 0.5rem;
        background-color: rgba(0, 0, 0, 0.03);
    }

    .image-wrapper {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .image-wrapper img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    /* Estilos para miniaturas */
    .thumbnails-container {
        margin-top: 0.75rem;
        height: 80px;
        overflow: hidden;
    }

    .thumbnails-track {
        display: flex;
        gap: 10px;
        height: 100%;
    }

    .thumbnail-item {
        flex: 0 0 auto;
        width: 100px;
        cursor: pointer;
    }

    .thumb-wrapper {
        height: 100%;
        opacity: 0.6;
        transition: opacity 0.3s;
        border: 2px solid transparent;
        border-radius: 0.25rem;
        overflow: hidden;
    }

    .thumb-wrapper img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .thumbnail-item.active .thumb-wrapper {
        opacity: 1;
        border-color: var(--gallery-theme-color, #007aff);
    }

    /* Botón de pantalla completa */
    .fullscreen-button {
        position: absolute;
        top: 0.75rem;
        right: 0.75rem;
        background: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        transition: background-color 0.3s;
    }

    .fullscreen-button:hover {
        background: rgba(0, 0, 0, 0.7);
    }

    /* Overlay de pantalla completa */
    .fullscreen-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.9);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .fullscreen-overlay.hidden {
        display: none;
    }

    .fullscreen-close {
        position: absolute;
        top: 1.5rem;
        right: 1.5rem;
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        border-radius: 50%;
        width: 3rem;
        height: 3rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 10;
        transition: background-color 0.3s;
    }

    .fullscreen-close:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .fullscreen-glide {
        width: 90%;
        max-width: 1200px;
        height: 80vh;
    }

    .fullscreen-glide .image-wrapper {
        height: 100%;
    }

    .fullscreen-glide .image-wrapper img {
        max-height: 100%;
        max-width: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
    }

    /* Estilos para el placeholder */
    .image-gallery-placeholder {
        width: 100%;
        background-color: rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 0.5rem;
    }

    .placeholder-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: rgba(0, 0, 0, 0.5);
    }

    .placeholder-content svg {
        margin-bottom: 1rem;
    }

    .placeholder-content p {
        font-size: 0.875rem;
    }

    /* Variables de tema */
    :root {
        --gallery-theme-color: #0077cc;
    }

    /* Personalización para modo oscuro */
    @media (prefers-color-scheme: dark) {
        .image-gallery-placeholder {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .placeholder-content {
            color: rgba(255, 255, 255, 0.5);
        }
    }

    /* Estilos para flechas de Glide */
    .glide__arrows {
        position: absolute;
        top: 50%;
        width: 100%;
        transform: translateY(-50%);
        pointer-events: none;
    }

    .glide__arrow {
        position: absolute;
        background-color: rgba(255, 255, 255, 0.6);
        color: #333;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transform: translateY(-50%);
        pointer-events: auto;
        padding: 0;
        z-index: 2;
    }

    .glide__arrow--left {
        left: 15px;
    }

    .glide__arrow--right {
        right: 15px;
    }

    .glide__arrow:hover {
        background-color: rgba(255, 255, 255, 0.9);
    }

    /* Puntos de navegación */
    .glide__bullets {
        position: absolute;
        bottom: 15px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        justify-content: center;
        z-index: 2;
    }

    .glide__bullet {
        background: rgba(255, 255, 255, 0.7);
        width: 10px;
        height: 10px;
        border: none;
        border-radius: 50%;
        margin: 0 4px;
        cursor: pointer;
        padding: 0;
    }

    .glide__bullet--active {
        background: var(--gallery-theme-color, #0077cc);
    }

    /* Para esconder texto solo visible para lectores de pantalla */
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }
</style>

<script define:vars={{ glideOptions }}>
    import Glide from '@glidejs/glide';

    // Función para limpiar event listeners
    const cleanupListeners = (id) => {
        const fullscreenButton = document.getElementById(`${id}-fullscreen`);
        const closeButton = document.getElementById(`${id}-close`);

        if (fullscreenButton) {
            const newButton = fullscreenButton.cloneNode(true);
            fullscreenButton.parentNode.replaceChild(newButton, fullscreenButton);
        }

        if (closeButton) {
            const newCloseButton = closeButton.cloneNode(true);
            closeButton.parentNode.replaceChild(newCloseButton, closeButton);
        }

        // Limpiar listener de tecla escape
        document.removeEventListener('keydown', escKeyHandler);
    };

    // Manejador para la tecla Escape
    function escKeyHandler(event) {
        if (event.key === 'Escape') {
            const options = JSON.parse(glideOptions);
            const overlay = document.getElementById(`${options.id}-overlay`);
            if (overlay && !overlay.classList.contains('hidden')) {
                const closeButton = document.getElementById(`${options.id}-close`);
                closeButton?.click();
            }
        }
    }

    function initializeGallery() {
        try {
            const options = JSON.parse(glideOptions);
            let mainGlide;
            let fullscreenGlide;

            // Limpiar event listeners anteriores
            cleanupListeners(options.id);

            // Configuración para Glide
            const glideConfig = {
                type: 'carousel',
                perView: 1,
                gap: 0,
                keyboard: true,
                animationDuration: 400,
                rewind: options.loop,
                hoverpause: true
            };

            // Añadir autoplay si está activado
            if (options.autoplay) {
                glideConfig.autoplay = options.autoplayDelay;
            }

            // Aplicar el efecto si está especificado
            if (options.effect === 'fade') {
                glideConfig.animationTimingFunc = 'ease-out';
                // Aquí se podrían añadir más configuraciones específicas para el efecto fade
            }

            // Inicializar el slider principal
            const glideElement = document.getElementById(options.id);
            if (glideElement) {
                mainGlide = new Glide(`#${options.id}`, glideConfig);
                mainGlide.mount();

                // Marcar los bullets activos correctamente
                mainGlide.on('run', () => {
                    const bullets = document.querySelectorAll(`#${options.id} .glide__bullet`);
                    bullets.forEach((bullet, index) => {
                        if (index === mainGlide.index) {
                            bullet.classList.add('glide__bullet--active');
                        } else {
                            bullet.classList.remove('glide__bullet--active');
                        }
                    });
                });
            }

            // Gestionar miniaturas si están habilitadas
            if (options.thumbnails) {
                const thumbnailItems = document.querySelectorAll(`#${options.id}-thumbs .thumbnail-item`);

                // Marcar la primera miniatura como activa
                if (thumbnailItems.length > 0) {
                    thumbnailItems[0].classList.add('active');
                }

                // Añadir event listeners a las miniaturas
                thumbnailItems.forEach((item) => {
                    item.addEventListener('click', () => {
                        const index = parseInt(item.dataset.index, 10);
                        if (mainGlide) {
                            mainGlide.go(`=${index}`);
                        }

                        // Actualizar clase activa
                        thumbnailItems.forEach(thumb => thumb.classList.remove('active'));
                        item.classList.add('active');
                    });
                });

                // Actualizar miniaturas cuando cambie el slide
                if (mainGlide) {
                    mainGlide.on('run', () => {
                        const index = mainGlide.index;
                        thumbnailItems.forEach(thumb => thumb.classList.remove('active'));
                        if (thumbnailItems[index]) {
                            thumbnailItems[index].classList.add('active');
                        }
                    });
                }
            }

            // Gestión de vista completa si está habilitada
            if (options.fullscreen) {
                const fullscreenButton = document.getElementById(`${options.id}-fullscreen`);
                const fullscreenOverlay = document.getElementById(`${options.id}-overlay`);
                const closeButton = document.getElementById(`${options.id}-close`);

                fullscreenButton?.addEventListener('click', function() {
                    if (fullscreenOverlay) {
                        fullscreenOverlay.classList.remove('hidden');
                        document.body.style.overflow = 'hidden';

                        // Inicializar Glide en pantalla completa
                        fullscreenGlide = new Glide(`#${options.id}-fullscreen-glide`, {
                            ...glideConfig,
                            startAt: mainGlide ? mainGlide.index : 0
                        });
                        fullscreenGlide.mount();

                        // Añadir listener para la tecla Escape
                        document.addEventListener('keydown', escKeyHandler);
                    }
                });

                closeButton?.addEventListener('click', function() {
                    if (fullscreenOverlay) {
                        fullscreenOverlay.classList.add('hidden');
                        document.body.style.overflow = '';

                        // Actualizar el índice del Glide principal
                        if (fullscreenGlide && mainGlide) {
                            mainGlide.go(`=${fullscreenGlide.index}`);
                        }

                        // Destruir el Glide en pantalla completa
                        if (fullscreenGlide) {
                            fullscreenGlide.destroy();
                            fullscreenGlide = null;
                        }

                        // Eliminar listener de tecla Escape
                        document.removeEventListener('keydown', escKeyHandler);
                    }
                });
            }

            return () => {
                // Función de limpieza
                if (mainGlide) {
                    mainGlide.destroy();
                }
                if (fullscreenGlide) {
                    fullscreenGlide.destroy();
                }
                cleanupListeners(options.id);
            };
        } catch (error) {
            console.error('Error al inicializar la galería:', error);
        }
    }

    // Inicializar al cargar la página
    let cleanup;
    document.addEventListener('DOMContentLoaded', () => {
        cleanup = initializeGallery();
    });

    // Re-inicializar cuando ocurra una navegación en Astro
    document.addEventListener('astro:page-load', () => {
        if (cleanup) cleanup();
        cleanup = initializeGallery();
    });

    // Limpiar cuando se desmonte la página
    document.addEventListener('astro:before-swap', () => {
        if (cleanup) cleanup();
    });
</script>